<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python技术点]]></title>
    <url>%2F2019%2F03%2F20%2Fpython%E6%8A%80%E6%9C%AF%E7%82%B9%2F</url>
    <content type="text"><![CDATA[前言1本篇博文并无特定知识点，仅用作记录工作学习中遇到的问题，知识积累 一、装饰器装饰器的作用就是在不改变原有函数代码结构，功能的前提下增加新的功能。主要用途有： 123①缓存②重试③兼容旧版参数 二、Pycharm新建文件时文件第一行自动加上导入utf-8语句按图示设置即可 1# *_*coding:utf-8 *_* 三、Python 性能提升小技巧python性能提升小技巧可参考该博文https://www.cnblogs.com/taceywong/p/5773220.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study for python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法（Python篇)]]></title>
    <url>%2F2019%2F03%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88Python%E7%AF%87)%2F</url>
    <content type="text"><![CDATA[数据结构与算法前言本书基于作者用Python作为工作语言讨论数据结构和算法的基本问题，其撰写主要有以下几方面考虑： ①结合数据结构和算法，讨论Python中重要数据类型的实现情况和性质，帮助读者理解Python语言程序，理解如何写出高效的Python程序 ②展示Python的面向对象技术可以怎样运用。书中构造了一批相互关联的数据结构 类，前面定义的类被反复应用在后续章节的数据结构和算法中 1基于上述情况，本书不但可以作为数据结构课程的教材，也可以作为学习Python语言编程技术的后续读物（假设读者已经有了Python编程的基本知识） 第1章：绪论1作为基于Python语言的“数据结构与算法”教程，本章首先讨论一些与数据结构和算法有关的基础问题，还将特别关注Python语言的一些相关情况。 未完待续]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study for 算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python手册-学习心得]]></title>
    <url>%2F2019%2F03%2F14%2Fpython%E6%89%8B%E5%86%8C-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[前言：python简介1Python是一种简单的、解释型的、交互式的、可移植的、面向对象的超高级语言。Python作为一种功能强大且通用的编程语言而广受好评，它具有非常清晰的语法特点，适用于多种操作系统。 ​ Python有一个交互式的开发环境。因为Python是解释运行的，也是说Python在代码的同时就可以进行运行，从而大大节省了类似java的编译时间。另外Python语法简单，且内置了多种高级数据结构，如字典、列表等，所以使用起来就特别简单。 ​ Python具有大部分面向对象语言的特征，可完全进行面向对象编程。Python具有简单易用，可移植性强的特点，颇受众多程序员们的喜爱。它可以在MS-DOS、WIndows、WIndows NT、Linux等多种操作系统上运行。（PS：在Python学习手册这本书出版时也即2009年，Python在TIOBE开发语言排行榜上名列第七，如今2019年3月份，Python已然杀到排行榜第三的位置，且逐渐逼近老二Java） ​ 本书只是作为Python的入门级书籍，将本书学完以后，可以继续学习轻量级书籍《Programming Python》或者《Python Pocket Reference》，那本书提供了更强大并且更完整的例子，还有应用程序编程技巧的教程。 第一章:问答环节（一）人们为何使用Python①软件质量：在很大程度上，Python更注重可读性、一致性和软件质量，从而与脚本语言世界中的其他工具区别开来。Python代码的设计致力于可读性，因此具备更优秀的可重用性和可维护性。此外，Python支持软件开发的高级重用机制。例如面向对象程序设计（OOP，object-oriented programming）。 ②提高开发者效率：首先要声明的是Python属于解释型语言，相对于C、C++和Java等编译/静态类型语言，Python的开发者效率提高了数倍。Python代码的大小往往也只有C++或Java的1/5~1/3。这就意味者开发时，Python代码就相对较少，维护时就更不用说了。并且Python这种解释型语言的特性是开发时就可以立即运行的，进一步提高了程序员的开发效率。 ③程序的可移植性：绝大多数的Python的程序不做任何改变即可在所有主流计算机平台上运行。例如，在Linux和WIndows之间移植Python代码，只需简单地在机器间复制代码即可立即运行。 ④标准库的支持：Python内置了众多预编译并可移植的功能模块，这些功能模块叫做标准库（standard library）。标准库支持一系列应用级的编程任务。Python的第三方支持工具包括网站开发、数值计算、串口读写、游戏开发等各个方面。 ⑤组件集成：Python脚本可通过灵活的集成机制轻松地与应用程序的其他部分进行通信。这种集成使得Python成为产品定制和扩展的工具。Python绝不仅仅是一个独立的工具。 ⑥享受乐趣：Python的易用性和强大内置工具使编程成为一种乐趣而不是琐碎的重复劳动。 （二）Python的缺点与编译语言相比较，Python的执行速度还不够快。 （三）使用Python可以做些什么①系统编程 ②用户图形接口 ③Internet脚本 ④组件集成 ⑤数据库编程 ⑥快速原型 ⑦数值计算和科学计算编程 ⑧游戏、图像、人工智能、XML、机器人等 （四）Python有哪些技术上的优点①面向对象 ②免费 ③可移植 ④功能强大 ⑤可混合 ⑥简单易用 ⑦简单易学 第二章:Python如何运行程序1本章和下一章将给出程序执行的简要说明:应该如何开始编写代码以及Python如何运行代码。 Python的视角当Python运行脚本时,在代码开始进行处理之前,Python还会执行一些步骤。确切地说,第一步是编译成所谓的’字节码’,之后将其转发到所谓的’虚拟机’中。 字节码编译当程序执行时，Python内部(对大多数用户是完全隐藏的)会先将源代码(文件中的语句)编译成所谓字节码的形式。相对于文本文件中原始的代码语句,字节码的运行速度要快很多。 如果Python进程在机器上拥有写入权限,那么它将把程序的字节码保存为一个以.pyc为扩展名的文件(“.pyc”就是编译过的”.py” 源代码)。当程序运行以后，我们将会在源代码的同级目录下看到这些.pyc文件。 Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时,如果上次运行程序以后没有进行修改代码操作的话,Python将会直接加载.pyc的文件即跳过编译步骤。当Python必须重编译时,它会自动检查源文件和字节码文件的时间戳:如果你又保存了源代码,下次程序运行时,字节码将重新创建。 字节码文件同样是分发Python程序的方法之一:如果Python找到的都是.pyc文件,它也很乐意运行这个程序,尽管没有原始的.py源文件。 Python虚拟机(PVM)一旦程序编译成字节码(或者从已经编译好的.pyc文件中载入),之后的字节码会发送到Python虚拟机(Python Virtual Machine)上执行。PVM不是一个独立的程序,不需要安装。它是Python的运行引擎,是Python中实际运行脚本的组件。从技术层面考虑,它才是所谓”Python解释器”的最后一步。 性能的含义Python与C和C++这类完全编译语言不同之处在于,Python是代码写好之后立即运行。另外一个就是,上文提到的字节码仅仅是特定于Python的一种表现形式,并不是机器的二进制代码。 这就是Python代码无法运行的像C或C++代码一样快的原因:PVM循环仍需要解释字节码,并且字节码指令与CPU指令相比需要更多的工作。 开发的含义Python执行模块的另一个情况是其开发和执行的环境实际上并没有区别。也就是说,编译和执行源代码是同一个系统。编译器总是在运行时出现,并且是运行程序系统的一部分。 这使得开发周期大大缩短。在程序开始执行之前不需要预编译和连接,只需要简单输入并运行代码即可。这同样使Python具有更多的动态语言特性。 执行模块的变体略 Python实现的替代者在该书编写过程中,Python语言主要有三种实现方式(CPython、JPython和Ironpython)以及一些次要的实现方式,例如Stackless Python。简要的说,CPython是标准的实现,其他的都是有特定的目标和角色的。 CPython和python的其他两种实现方式对比，原始的、标准的python实现方式通常称作CPython。这个名字根据它是由可移植的ANSI C语言代码编写而成的这个事实而来的。 JythonJython系统(最初称为JPython)是一种Python语言的替代实现方式,其目的是为了与Java编程语言集成。Jython包含了Java类,这些类编译了Python源代码、形成Java字节码,并将得到的字节码映射到Java虚拟机(JVM)上。 Jython的目的是让Python代码能够脚本化java应用程序,他实现了与java的无缝集成。但是Jython要比CPython慢而且也不够健壮,它往往被看做是一种有趣的工具。 IronpythonPython的第三种实现方式（比前两种都要新），其目的是让python程序可以与windows平台的.NET框架以及与之对应的Linux上开源的Mono编程写的应用相集成。效果大体等同于Jython。 Psyco实时编译器可以让Python程序运行很快,本质上是一个扩展字节码执行模块的组件,但是仅对于循环或涉及到整数和浮点数的优化起到较好效果,且使用上对于硬件有局限性。 未完待续]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study for python手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django Book 2.0 学习心得(二)]]></title>
    <url>%2F2019%2F03%2F13%2FDjango-Book-2-0-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[第三章:视图和URL配置​ 前一章学习了如果创建一个Django项目并启动Django开发服务器。在这一章我们将学习使用Django创建动态网页的基本知识。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study for django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django Book 2.0 学习心得]]></title>
    <url>%2F2019%2F03%2F12%2FDjango-Book-2-0-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[第一章:介绍Django1前言:Django，一个可以使Web开发工作愉快并且高效的Web开发框架。 使用Django，使你能够以最小的代价构建和维护高质量的Web应用。 ​ 为了让开发人员专注于web应用上有趣而又关键性的东西,Django应运而生。通过阅读这本书,我们将学会快速开发功能强大网站的技巧,并且我们的代码将会十分清晰,易于维护.本书的代码清晰,易维护,通过学习,可以快速开发功能强大的网站。 框架是什么?​ Web框架为应用程序提供了一套程序框架， 这样你可以专注于编写清晰、易维护的代码，而无需从头做起。 简单来说，这就是Django所能做的。 MVC设计模式​ 通过使用Django来完成一个网站功能的例子： 首先，我们分成4个Python的文件，(models.py ,views.py , urls.py ) 和html模板文件 (latest_books.html )。然后，不用关心语法细节；只要用心感觉整体的设计。 这里只关注分割后的几个文件： 12341)models.py 文件主要用一个Python类来描述数据表。称为模型(model)。运用这个类，你可以通过简单的Python的代码来创建、检索、更新、删除 数据库中的记录而无需写一条又一条的SQL语句。2)views.py文件包含了页面的业务逻辑。latest_books()函数叫做视图。3)urls.py 指出了什么样的URL调用什么的视图。在这个例子中/latest/URL将会调用latest_books()这个函数。换句话说，如果你的域名是example.com，任何人浏览网址http://example.com/latest/将会调用latest_books()这个函数。4)latest_books.html是html模板,它描述了这个页面的设计是如何的。使用带基本逻辑声明的模板语言，如&#123;% for book in book_list %&#125; ​ 结合起来，这些部分松散遵循的模式称为模型-视图-控制器(MVC)。 简单的说， MVC 是一种软件开发的方法，它把代码的定义和数据访问的方法（模型）与请求逻辑（控制器）还有用户接口（视图）分开来。 ​ 这种设计模式关键的优势在于各种组件都是松散结合的。这样，每个由Django驱动 的Web应用都有着明确的目的，并且可独立更改而不影响到其它的部分。比如，开发者更改一个应用程序中的 URL 而不用影响到这个程序底层的实现。设计师可以改变 HTML 页面 的样式而不用接触 Python 代码。数据库管理员可以重新命名数据表并且只需更改一个地方，无需从一大堆文件中进行查找和替换。 Django历史12345678如果你曾编写过网络应用程序。 那么你很有可能熟悉之前我们的 CGI 例子。1. 从头开始编写网络应用程序。2. 从头编写另一个网络应用程序。3. 从第一步中总结（找出其中通用的代码），并运用在第二步中。4. 重构代码使得能在第 2 个程序中使用第 1 个程序中的通用代码。5. 重复 2-4 步骤若干次。6. 意识到你发明了一个框架。这正是为什么 Django 建立的原因！ 第二章:入门Django和Python版本对应: ​ 最新最好的django的开发版本称为trunk,可以从django的subversion处获得。如果你想尝鲜，或者想为django贡献代码，那么你应当安装这个版本。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study for django</tag>
      </tags>
  </entry>
</search>
