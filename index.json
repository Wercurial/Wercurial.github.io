
[{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/fnos/","section":"Tags","summary":"","title":"Fnos","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/kubernetes/","section":"Kubernetes","summary":"","title":"Kubernetes","type":"kubernetes"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/mount/","section":"Tags","summary":"","title":"Mount","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/nas/","section":"Tags","summary":"","title":"Nas","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/path/","section":"Tags","summary":"","title":"Path","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/tools/","section":"工具合集","summary":"","title":"工具合集","type":"tools"},{"content":"","date":"2024-09-08","externalUrl":null,"permalink":"/","section":"欢迎来到云一二三知识库! 🎉","summary":"","title":"欢迎来到云一二三知识库! 🎉","type":"page"},{"content":" 1. 批量删除卸载docker遗留的大量挂载路径 # 可自定义路径： /var/lib/bak-docker/overlay2 /var/lib/bak-docker/containers #!/bin/bash # 执行 df -h 命令并将输出存储到变量中 disk_output=$(df -h) # 定义两个正则表达式来匹配目标路径 regex_overlay=\u0026#34;/var/lib/bak-docker/overlay2/[a-fA-F0-9]{64}/merged\u0026#34; regex_containers=\u0026#34;/var/lib/bak-docker/containers/[a-zA-Z0-9.-]+\u0026#34; # 使用grep匹配包含特定路径的行，并提取路径 while read -r line; do if [[ $line =~ $regex_overlay || $line =~ $regex_containers ]]; then # 提取路径 path=$(echo $line | awk \u0026#39;{print $6}\u0026#39;) echo \u0026#34;Found path: $path\u0026#34; # 检查路径是否存在，存在则卸载 if [ -d \u0026#34;$path\u0026#34; ]; then if ! mountpoint -q \u0026#34;$path\u0026#34;; then echo \u0026#34;Path $path is not mounted.\u0026#34; else umount \u0026#34;$path\u0026#34; echo \u0026#34;Unmounted $path\u0026#34; fi else echo \u0026#34;Path $path does not exist.\u0026#34; fi fi done \u0026lt;\u0026lt;\u0026lt; \u0026#34;$disk_output\u0026#34; ","date":"2024-09-08","externalUrl":null,"permalink":"/kubernetes/20240908-1/","section":"Kubernetes","summary":"\u003ch1 class=\"relative group\"\u003e1. 批量删除卸载docker遗留的大量挂载路径 \n    \u003cdiv id=\"1-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E5%8D%B8%E8%BD%BDdocker%E9%81%97%E7%95%99%E7%9A%84%E5%A4%A7%E9%87%8F%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E5%8D%B8%E8%BD%BDdocker%E9%81%97%E7%95%99%E7%9A%84%E5%A4%A7%E9%87%8F%E6%8C%82%E8%BD%BD%E8%B7%AF%E5%BE%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e可自定义路径：\n\u003cul\u003e\n\u003cli\u003e/var/lib/bak-docker/overlay2\u003c/li\u003e\n\u003cli\u003e/var/lib/bak-docker/containers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行 df -h 命令并将输出存储到变量中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003edisk_output\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003edf -h\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 定义两个正则表达式来匹配目标路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eregex_overlay\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/var/lib/bak-docker/overlay2/[a-fA-F0-9]{64}/merged\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eregex_containers\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/var/lib/bak-docker/containers/[a-zA-Z0-9.-]+\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 使用grep匹配包含特定路径的行，并提取路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e -r line\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e~ \u003cspan class=\"nv\"\u003e$regex_overlay\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e~ \u003cspan class=\"nv\"\u003e$regex_containers\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# 提取路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nv\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $6}\u0026#39;\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Found path: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e# 检查路径是否存在，存在则卸载\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -d \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e ! mountpoint -q \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Path \u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e is not mounted.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                umount \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Unmounted \u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Path \u003c/span\u003e\u003cspan class=\"nv\"\u003e$path\u003c/span\u003e\u003cspan class=\"s2\"\u003e does not exist.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$disk_output\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pr","title":"批量删除卸载docker遗留的大量挂载路径","type":"blog"},{"content":" 0. 前言 # 飞牛云推出的飞牛云nas操作系统，FnOS基于最新 Linux 内核（Debian 发行版）深度开发，兼容主流 x86 硬件，自由组装 NAS，灵活扩展外部存储 飞牛云官网\n1. 安装步骤 # 本文通过vmware虚拟机进行FnOS的安装操作，主打体验\n1.1 创建虚拟机 # 点击vmware主页创建新的虚拟机 选择稍后安装操作系统 选择Linux操作系统 选择Debian 9.x（FnOS基于此开发） 选择虚拟机所在目录 给虚拟机分配存储空间 给虚拟机分配内存、cpu等资源 设置合适的内存、cpu大小 给虚拟机选择操作系统镜像 选择提前下载好的trim.iso镜像文件 点击开启此虚拟机，进行虚拟机的安装操作 选择分配好的虚拟硬盘 设置系统分区大小，根据硬盘富裕程度分配 格式化该虚拟硬盘 等待安装 安装完成 等待几秒自动进入系统 弹出系统终端界面，安装成功 然后可以将vmware虚拟机最小化了，接下来操作都将在浏览器完成 根据终端给出给出的Web UI地址（默认端口是8000）去浏览器访问 2. 使用步骤 # 2.1 第一次登陆 # 浏览器输入第一步安装完成后给出的WebUI地址 第一次登陆，设置用户名/密码 此步骤设置的用户名密码即为FnOS底层debian系统的管理员用户与密码 2.2 第二次登陆 # 浏览器输入第一步安装完成后给出的WebUI地址 输入设置好的用户名/密码 2.3 享受国产Nas吧 # ","date":"2024-09-08","externalUrl":null,"permalink":"/tools/20240908-1/","section":"工具合集","summary":"\u003ch1 class=\"relative group\"\u003e0. 前言 \n    \u003cdiv id=\"0-%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e飞牛云推出的飞牛云nas操作系统，FnOS基于最新 Linux 内核（Debian 发行版）深度开发，兼容主流 x86 硬件，自由组装 NAS，灵活扩展外部存储\n\u003ca href=\"https://www.fnnas.com/download?key=fnos\" target=\"_blank\"\u003e飞牛云官网\u003c/a\u003e\u003c/p\u003e","title":"通过vmware虚拟机安装国产nas系统FnOS","type":"blog"},{"content":"","date":"2024-09-07","externalUrl":null,"permalink":"/tags/frp/","section":"Tags","summary":"","title":"Frp","type":"tags"},{"content":"","date":"2024-09-07","externalUrl":null,"permalink":"/tags/net/","section":"Tags","summary":"","title":"Net","type":"tags"},{"content":"","date":"2024-09-07","externalUrl":null,"permalink":"/tags/proxy/","section":"Tags","summary":"","title":"Proxy","type":"tags"},{"content":" 0. 前言 # 本文主要用于通过一台具有公网ip地址的服务器来代理可访问公网的nas内部的局域网服务，需注意的是本方案存在一定的被黑客攻击风险，需谨慎使用。\n1. frps配置及部署（服务端） # 部署在具有公网ip地址的服务器上\n运行命令 docker-compose -f docker-compose.yaml up -d docker-compose.yaml version: \u0026#39;3\u0026#39; services: frp: container_name: frps image: snowdreamtech/frps:0.60 network_mode: \u0026#34;host\u0026#34; environment: - TZ=Asia/Shanghai volumes: - \u0026#34;/data/software/frps/frps.toml:/etc/frp/frps.toml\u0026#34; restart: always 配置：frps.toml [common] bindAddr = 0.0.0.0 bind_port = 5xxx # 启用面板 dashboard_port = 5x1x # 面板登录名和密码 dashboard_user = xxx dashboard_pwd = xxxx # 使用http代理并使用5x2x端口进行穿透 vhost_http_port = 5x2x # 使用https代理并使用5x3x端口进行穿透 vhost_https_port = 5x3x # 日志路径 log_file = ./frps.log # 日志级别 log_level = info # 日志最大保存天数 log_max_days = 2 # 认证超时时间 authentication_timeout = 900 # 认证token，客户端需要和此对应 token=123456 # 最大连接数 max_pool_count = 50 max_ports_per_client = 0 2. frpc配置及部署（客户端） # 部署在可访问公网的nas上\n运行命令 docker-compose -f docker-compose.yaml up -d docker-compose.yaml version: \u0026#39;3\u0026#39; services: frp: container_name: frpc image: snowdreamtech/frpc:0.60 network_mode: \u0026#34;host\u0026#34; environment: - TZ=Asia/Shanghai volumes: - \u0026#34;/vol1/1000/frpc/frpc.toml:/etc/frp/frpc.toml\u0026#34; restart: always 配置：frpc.toml token、server_addr、server_port：对应frps的配置来填写 custom_domains、customDomains：如果没有域名，则填写frps服务器的ip地址 remote_port：设定frps服务器代理的端口 [common] server_addr = xx.xx.xx.xx server_port = 5xxx token = \u0026#34;123456\u0026#34; log.to = \u0026#34;./frpc.log\u0026#34; log.level = info log.maxDays = 3 log.disablePrintColor = false [[proxies]] name = xxxx type = http local_ip = 0.0.0.0 local_port = xxxx custom_domains = frps.ip customDomains = xx.xx.xx remote_port = 5x2x ","date":"2024-09-07","externalUrl":null,"permalink":"/tools/20240907-1/","section":"工具合集","summary":"\u003ch1 class=\"relative group\"\u003e0. 前言 \n    \u003cdiv id=\"0-%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#0-%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e本文主要用于通过一台具有公网ip地址的服务器来代理可访问公网的nas内部的局域网服务，需注意的是本方案存在一定的被黑客攻击风险，需谨慎使用。\u003c/p\u003e","title":"内网穿透工具FRP使用","type":"blog"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"Ai","type":"tags"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/backup/","section":"Tags","summary":"","title":"Backup","type":"tags"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/cloud/","section":"Tags","summary":"","title":"Cloud","type":"tags"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/harbor/","section":"Tags","summary":"","title":"Harbor","type":"tags"},{"content":" 1. 待迁移Harbor仓库配置 # 1.1 通过仓库管理添加新Harbor仓库关联 # 新建目标 添加对应Harbor仓库信息 添加具有创建空间权限的用户名、密码 测试连接是否成功 保存 1.2 通过复制管理添加待复制空间的规则 # 新建规则 选择复制模式 配置资源过滤器条件 选择目标仓库（1.1中增加的仓库） 选择触发模式（默认手动） 2. 开始迁移 # 选中复制管理里新建的规则，点击复制按钮开始复制 查看进度 ","date":"2024-09-02","externalUrl":null,"permalink":"/cloudnative/20240902-1/","section":"云原生","summary":"\u003ch5 id=\"typeit-44468b13ec0e2d9a786f3228a14e74ca\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-44468b13ec0e2d9a786f3228a14e74ca\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e1. 待迁移Harbor仓库配置 \n    \u003cdiv id=\"1-%E5%BE%85%E8%BF%81%E7%A7%BBharbor%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-%E5%BE%85%E8%BF%81%E7%A7%BBharbor%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1.1 通过仓库管理添加新Harbor仓库关联 \n    \u003cdiv id=\"11-%E9%80%9A%E8%BF%87%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E6%B7%BB%E5%8A%A0%E6%96%B0harbor%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#11-%E9%80%9A%E8%BF%87%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E6%B7%BB%E5%8A%A0%E6%96%B0harbor%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./1.png\" alt=\"image.png\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"Harbor镜像仓库迁移","type":"blog"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/image/","section":"Tags","summary":"","title":"Image","type":"tags"},{"content":" 注意 # 需要注意的是kserve使用的模型下载链接storageUri: \u0026quot;http://172.16.2.132:9999/00000123.tar\u0026quot;对应的模型压缩包：应该是解压后模型及配置文件平铺开来的，而不是解压后还有一层目录包裹的 同时对于storageUri: \u0026quot;http://172.16.2.132:9999/00000123\u0026quot;的模型链接，00000123里面的内容应该直接是模型及配置文件，而不应该再有深层次的目录 1. kserve-0.10.0版本安装 # 1.1 kserve与依赖版本对应 # K8s v1.22.15 KServe v0.10.0 Cert-manager v1.11.0 Ingress-nginx（与k8s版本对应关系） v1.3.0 1.2 部署ingress-nginx # 采用RawDeployment模式，因此不需要按照官网要求安装Istio（Istio较重）\n通过管理Ingress，控制路由，因此部署 Ingress-Nginx 即可。 kubectl apply -f nginx-ingress-1.3.1.yml 1.3 部署CertManager # kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml 1.4 部署Kserve # 需修改kserve.yaml中ingressClassName为创建的IngressClass（本例为nginx） ingress: |- { \u0026#34;ingressClassName\u0026#34; : \u0026#34;nginx\u0026#34;, } # 下载 wget https://github.com/kserve/kserve/releases/download/v0.10.0/kserve.yaml # 修改以后部署 kubectl apply -f kserve.yaml # 下载 wget https://github.com/kserve/kserve/releases/download/v0.10.0/kserve-runtimes.yaml kubectl apply -f kserve-runtimes.yaml 修改inferenceservice-config部署模式为RawDeployment kubectl patch configmap/inferenceservice-config -n kserve --type=strategic -p \u0026#39;{\u0026#34;data\u0026#34;: {\u0026#34;deploy\u0026#34;: \u0026#34;{\\\u0026#34;defaultDeploymentMode\\\u0026#34;: \\\u0026#34;RawDeployment\\\u0026#34;}\u0026#34;}}\u0026#39; 1.5 测试 # 1.5.1 配置模型crd # demo-tensorflow.yaml name：tensorflow-kserve storageUri：http://172.16.2.132:9999/00000123.tar（采用文件服务器形式提供模型文件tar包或zip包，服务会自动解压） 模型下载链接，tags2 4 apiVersion: \u0026#34;serving.kserve.io/v1beta1\u0026#34; kind: \u0026#34;InferenceService\u0026#34; metadata: name: \u0026#34;tensorflow-kserve\u0026#34; spec: predictor: tensorflow: storageUri: \u0026#34;http://172.16.2.132:9999/00000123.tar\u0026#34; 1.5.2 使用ingress测试 # INGRESS_HOST：10.96.1.200（Ingress-nginx地址） MODEL_NAME：1.5.1定义的name INPUT_PATH：模型入参 #!/bin/bash # nginx ingress 的访问地址 INGRESS_HOST=10.96.1.200 INGRESS_PORT=80 MODEL_NAME=tensorflow-kserve INPUT_PATH=@./input.json SERVICE_HOSTNAME=$(kubectl get inferenceservice ${MODEL_NAME} -o jsonpath=\u0026#39;{.status.url}\u0026#39; | cut -d \u0026#34;/\u0026#34; -f 3) curl -H \u0026#34;Host: ${SERVICE_HOSTNAME}\u0026#34; http://${INGRESS_HOST}:${INGRESS_PORT}/v1/models/$MODEL_NAME:predict -d $INPUT_PATH input.json { \u0026#34;instances\u0026#34;:[1,2,3] } 结果如下 2. kserve-0.13.0版本安装 # 2.1 kserve与依赖版本对应 # K8s v1.29.7 KServe v0.13.0 Cert-manager v1.15.3 Ingress-nginx（与k8s版本对应关系） v1.11.2 2.2 部署ingress-nginx # 采用RawDeployment模式，因此不需要按照官网要求安装Istio（Istio较重）\n通过管理Ingress，控制路由，因此部署 Ingress-Nginx 即可。 本版本ingress-nginx采用helm安装 wget https://github.com/kubernetes/ingress-nginx/releases/download/helm-chart-4.11.2/ingress-nginx-4.11.2.tgz tar -zxf ingress-nginx-4.11.2.tgz helm install ingress-nginx ./ingress-nginx --namespace ingress-nginx --create-namespace 安装成功信息 (base) [root@node77 ingress-nginx]# kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR ingress-nginx-controller LoadBalancer 10.96.1.190 \u0026lt;pending\u0026gt; 80:32702/TCP,443:32064/TCP 37s app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx 2.3 部署 CertManager # kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml 2.4 部署Kserve # 需修改kserve.yaml中ingressClassName为创建的IngressClass（本例为nginx） ingress: |- { \u0026#34;ingressClassName\u0026#34; : \u0026#34;nginx\u0026#34;, } 需要注意的是在kserve v0.13.0版本中kserve-runtimes.yaml组件改名为kserve-cluster-resources.yaml # 下载 wget https://github.com/kserve/kserve/releases/download/v0.13.0/kserve.yaml # 修改以后部署 kubectl apply -f kserve.yaml # 下载 wget https://github.com/kserve/kserve/releases/download/v0.13.0/kserve-cluster-resources.yaml kubectl apply -f kserve-cluster-resources.yaml 修改inferenceservice-config部署模式为RawDeployment kubectl patch configmap/inferenceservice-config -n kserve --type=strategic -p \u0026#39;{\u0026#34;data\u0026#34;: {\u0026#34;deploy\u0026#34;: \u0026#34;{\\\u0026#34;defaultDeploymentMode\\\u0026#34;: \\\u0026#34;RawDeployment\\\u0026#34;}\u0026#34;}}\u0026#39; 2.5 测试 # 2.5.1 配置模型crd # 创建namespace kubectl create namespace test demo-tensorflow.yaml 注意：在kserve v0.13.0版本中，模型发布需要发布在非default命名空间或是kserve具有权限的命名空间中，否则模型对应Pod会报错No such file or directory: '/mnt/models'，初步怀疑跟2.3部署的CertManager配置有关系，暂未深究 注意：kserve创建的模型发布不能发布在kserve命名空间以及没有权限的命名空间中，否则模型对应Pod会报错No such file or directory: '/mnt/models'，这是kserve的webhook检查导致的，具体可以参考这个issue name：tensorflow-kserve storageUri：http://172.16.2.132:9999/00000123.tar（采用文件服务器形式提供模型文件tar包或zip包，服务会自动解压） 模型下载链接，tags2 4 apiVersion: \u0026#34;serving.kserve.io/v1beta1\u0026#34; kind: \u0026#34;InferenceService\u0026#34; metadata: name: \u0026#34;tensorflow-kserve\u0026#34; namespace: \u0026#34;test\u0026#34; spec: predictor: tensorflow: storageUri: \u0026#34;http://172.16.2.132:9999/00000123.tar\u0026#34; 2.5.2 使用ingress测试 # INGRESS_HOST：10.96.0.158（Ingress-nginx地址） MODEL_NAME：2.5.1定义的name INPUT_PATH：模型入参 #!/bin/bash # nginx ingress 的访问地址 INGRESS_HOST=10.96.0.158 INGRESS_PORT=80 MODEL_NAME=tensorflow-kserve INPUT_PATH=@./input.json SERVICE_HOSTNAME=$(kubectl -n test get inferenceservice ${MODEL_NAME} -o jsonpath=\u0026#39;{.status.url}\u0026#39; | cut -d \u0026#34;/\u0026#34; -f 3) curl -H \u0026#34;Host: ${SERVICE_HOSTNAME}\u0026#34; http://${INGRESS_HOST}:${INGRESS_PORT}/v1/models/$MODEL_NAME:predict -d $INPUT_PATH input.json { \u0026#34;instances\u0026#34;:[1,2,3] } 结果如下 ","date":"2024-09-02","externalUrl":null,"permalink":"/cloudai/20240902-1/","section":"云原生AI技术","summary":"\u003ch5 id=\"typeit-975418dc18a096f280744c8894f6f973\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-975418dc18a096f280744c8894f6f973\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e注意 \n    \u003cdiv id=\"%E6%B3%A8%E6%84%8F\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e需要注意的是kserve使用的模型下载链接\u003ccode\u003estorageUri: \u0026quot;http://172.16.2.132:9999/00000123.tar\u0026quot;\u003c/code\u003e对应的模型压缩包：应该是解压后模型及配置文件平铺开来的，而不是解压后还有一层目录包裹的\u003c/li\u003e\n\u003cli\u003e同时对于\u003ccode\u003estorageUri: \u0026quot;http://172.16.2.132:9999/00000123\u0026quot;\u003c/code\u003e的模型链接，00000123里面的内容应该直接是模型及配置文件，而不应该再有深层次的目录\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e1. kserve-0.10.0版本安装 \n    \u003cdiv id=\"1-kserve-0100%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-kserve-0100%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1.1 kserve与依赖版本对应 \n    \u003cdiv id=\"11-kserve%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#11-kserve%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eK8s\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003ev1.22.15\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://github.com/kserve/kserve/releases/download/v0.10.0/kserve.yaml/\" target=\"_blank\"\u003eKServe\u003c/a\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ev0.10.0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"\"\u003eCert-manager\u003c/a\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ev1.11.0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"https://kubernetes.github.io/ingress-nginx/deploy/#quick-start\" target=\"_blank\"\u003eIngress-nginx\u003c/a\u003e（\u003ca href=\"https://github.com/kubernetes/ingress-nginx#supported-versions-table\" target=\"_blank\"\u003e与k8s版本对应关系\u003c/a\u003e）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ev1.3.0\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1.2 部署ingress-nginx \n    \u003cdiv id=\"12-%E9%83%A8%E7%BD%B2ingress-nginx\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#12-%E9%83%A8%E7%BD%B2ingress-nginx\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e采用RawDeployment模式，因此不需要按照官网要求安装Istio（Istio较重）\u003c/p\u003e","title":"kserve安装使用","type":"blog"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/tags/machinelearning/","section":"Tags","summary":"","title":"Machinelearning","type":"tags"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/cloudnative/","section":"云原生","summary":"","title":"云原生","type":"cloudnative"},{"content":"","date":"2024-09-02","externalUrl":null,"permalink":"/cloudai/","section":"云原生AI技术","summary":"","title":"云原生AI技术","type":"cloudai"},{"content":"","date":"2024-09-01","externalUrl":null,"permalink":"/tags/containerd/","section":"Tags","summary":"","title":"Containerd","type":"tags"},{"content":"","date":"2024-09-01","externalUrl":null,"permalink":"/k8s-solve/","section":"k8s问题解决与记录","summary":"","title":"k8s问题解决与记录","type":"k8s-solve"},{"content":"kubernetes问题解决集合。\n1. 宿主机修改时DNS（/etc/resolv.conf）配置 # 宿主机集群更改DNS服务(/etc/resolv.conf), 需同时重启nodelocaldns(部分集群高配nodelocaldns)及coredns服务 2. 进入CoreDNS容器内部操作 # 2.1 进入k8s的coredns容器查看信息: # 您可以按照此处的说明使用 sidecar 模式:https://support.rancher.com/hc/en-us/articles/360041568712-How-to-troubleshoot-using-the-namespace-of-a-container#sidecar-container-0-2\n2.2 简而言之，这样做是为了找到一个运行 coredns pod 的节点: # kubectl -n kube-system get po -o wide | grep coredns ssh 到这些节点之一，然后: docker ps -a | grep coredns 将容器 ID 复制到剪贴板并运行: ID=\u0026lt;paste ID here\u0026gt; docker run -it --net=container:$ID --pid=container:$ID --volumes-from=$ID alpine sh 您现在将位于“sidecar”容器内，可以四处查看。 cat /etc/coredns/Corefile 3. 带有nodelocaldns集群重启后dns异常 # nodenocaldns日志报错如下：\ncoredns HINFO: read tcp 10.233.90.147:44370-\u0026gt;172.16.1.207:53: i/o timeout 通过排查发现是nolocaldns的53指向不是集群的dns服务器\n修改nodecaldns的corefile\n将其中 forward . 10.233.90.242 手动改为forward . 10.233.0.3 10.233.0.3为coredns的vip地址 10.233.90.242为coredns的pod ip地址，重启pod后发生变动，因此采用vip作为指向 cluster.local:53 { errors cache { success 9984 30 denial 9984 5 } reload loop bind 169.254.25.10 forward . 10.233.0.3 { force_tcp } prometheus :9253 health 169.254.25.10:9254 } in-addr.arpa:53 { errors cache 30 reload loop bind 169.254.25.10 forward . 10.233.0.3 { force_tcp } prometheus :9253 } ip6.arpa:53 { errors cache 30 reload loop bind 169.254.25.10 forward . 10.233.0.3 { force_tcp } prometheus :9253 } .:53 { errors cache 30 reload loop bind 169.254.25.10 forward . /etc/resolv.conf prometheus :9253 } 重新观察nodelocaldns日志，服务正常\n4. K8S版本与Linux内核不兼容导致内存泄露问题 # 4.1 背景 # kubelet误报内存压力(实际内存使用率很小)-\u0026gt;节点被打污点-\u0026gt;节点上pod处于驱逐状态-\u0026gt;重启kubelet会恢复\nmkdir /sys/fs/cgroup/memory/kubepods/besteffort/pod54ca8314-ae1a-4d22-8564-fdd73215f1cc: cannot allocate memory Normal Scheduled 7m19s default-scheduler Successfully assigned default/kt-rectifier-rulla to node133 Warning FailedCreatePodContainer 2m1s (x26 over 7m20s) kubelet unable to ensure pod container exists: failed to create container for [kubepods besteffort pod54ca8314-ae1a-4d22-8564-fdd73215f1cc] : mkdir /sys/fs/cgroup/memory/kubepods/besteffort/pod54ca8314-ae1a-4d22-8564-fdd73215f1cc: cannot allocate memory 4.2 Cgroup # 在当前内核版本（3.x）下，开启了kmem accounting功能，会导致memory cgroup的条目泄漏无法回收。\n4.3 解决方案 # 4.3.1 重启内存泄露服务器（临时解决） # 4.3.2 升级内核版本-4.x（永久解决） # 具体升级方案参考《Centos7内核升级》一文 ","date":"2024-09-01","externalUrl":null,"permalink":"/k8s-solve/20240901-3/","section":"k8s问题解决与记录","summary":"\u003cp\u003ekubernetes问题解决集合。\u003c/p\u003e","title":"kubernetes问题解决集合","type":"blog"},{"content":"","date":"2024-09-01","externalUrl":null,"permalink":"/tags/question/","section":"Tags","summary":"","title":"Question","type":"tags"},{"content":"","date":"2024-09-01","externalUrl":null,"permalink":"/tags/solve/","section":"Tags","summary":"","title":"Solve","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/crd/","section":"Tags","summary":"","title":"Crd","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/download/","section":"Tags","summary":"","title":"Download","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/file/","section":"Tags","summary":"","title":"File","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/gs/","section":"Tags","summary":"","title":"Gs","type":"tags"},{"content":"本文解决了k8s资源删除报Terminating卡住的问题。\n1.方案一 # 适用资源类型：pod、deploy、namespaces、crd\n使用kubectl delete crd卡住，用以下命令更新该资源的状态： kubectl patch crd/inferenceservices.serving.kserve.io -p \u0026#39;{\u0026#34;metadata\u0026#34;:{\u0026#34;finalizers\u0026#34;:[]}}\u0026#39; --type=merge 2.方案2(优先方案一) # # 1.导出配置 kubectl get ns rook-ceph -o json \u0026gt; tmp.json # 2.删除tmp.json中spec及status部分的内容 # 3.启动代理 kubectl proxy # 4.调用接口删除 curl -k -H \u0026#34;Content-Type: application/json\u0026#34; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/rook-ceph/finalize ","date":"2024-08-29","externalUrl":null,"permalink":"/k8s-solve/20240829-2/","section":"k8s问题解决与记录","summary":"\u003cp\u003e本文解决了k8s资源删除报Terminating卡住的问题。\u003c/p\u003e","title":"k8s资源删除报Terminating卡住","type":"blog"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/namespace/","section":"Tags","summary":"","title":"Namespace","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/terminating/","section":"Tags","summary":"","title":"Terminating","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/filedown/","section":"文件下载","summary":"","title":"文件下载","type":"filedown"},{"content":"本文提供了下载gs协议的文件方案。\n通过将gs://后的文件或文件夹地址拼接到https://storage.googleapis.com即可\n1. 原始文件地址 # gs://kfserving-examples/models/sklearn/1.0/model/model.joblib 2. 转换后的下载地址 # https://storage.googleapis.com/kfserving-examples/models/sklearn/1.0/model/model.joblib ","date":"2024-08-29","externalUrl":null,"permalink":"/filedown/20240829-1/","section":"文件下载","summary":"\u003cp\u003e本文提供了下载gs协议的文件方案。\u003c/p\u003e","title":"下载gs协议的文件","type":"blog"},{"content":"","date":"2024-08-26","externalUrl":null,"permalink":"/calico/","section":"calico","summary":"","title":"calico","type":"calico"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/calico/20240826-1/","section":"calico","summary":"\u003ch5 id=\"typeit-ccaa400c54080eb69775b832cdd583dd\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-ccaa400c54080eb69775b832cdd583dd\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e这是一个标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e","title":"First","type":"calico"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/ceph/20240826-1/","section":"RookCeph存储","summary":"\u003ch5 id=\"typeit-4b3b2247ac91943a2fe576ae718ab317\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-4b3b2247ac91943a2fe576ae718ab317\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e这是一个标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e","title":"First","type":"ceph"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/longhorn/20240826-1/","section":"longhorn存储","summary":"\u003ch1 class=\"relative group\"\u003e这是一个标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e","title":"First","type":"longhorn"},{"content":"","date":"2024-08-26","externalUrl":null,"permalink":"/longhorn/","section":"longhorn存储","summary":"","title":"longhorn存储","type":"longhorn"},{"content":"","date":"2024-08-26","externalUrl":null,"permalink":"/ceph/","section":"RookCeph存储","summary":"","title":"RookCeph存储","type":"ceph"},{"content":"","date":"2024-08-25","externalUrl":null,"permalink":"/tags/archives/","section":"Tags","summary":"","title":"Archives","type":"tags"},{"content":"","date":"2024-08-25","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2024-08-25","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"添加时间轴，归档博客。\n1. 创建时间轴相关文件 # 1.1 创建archives.html文件 # 复制layouts/default目录下的single.html文件为archives.html,并用以下代码替代html中的{{ .Content }} {{ range (where .Pages \u0026ldquo;Type\u0026rdquo; \u0026ldquo;blog\u0026rdquo;) }}：用于仅展示content目录下类型为blog的md文件 {{ range (.Site.RegularPages.GroupByDate \u0026#34;2006\u0026#34;) }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul class=\u0026#34;archive-list\u0026#34;\u0026gt; {{ range (where .Pages \u0026#34;Type\u0026#34; \u0026#34;blog\u0026#34;) }} \u0026lt;li\u0026gt; {{ .PublishDate.Format \u0026#34;2006-01-02\u0026#34; }} -\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 1.2 创建archives.md文件 # 在content目录下创建archives.md文件 --- title: \u0026#34;时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; date: 2017-07-17 description: \u0026#34;历史文章按照年归档.\u0026#34; type: \u0026#34;archives\u0026#34; cascade: showDate: true showAuthor: true invertPagination: true --- 2. 添加配置 # 在config/_default/menus.zh-cn.toml中添加如下配置 [[main]] name = \u0026#34;时间轴\u0026#34; pageRef = \u0026#34;archives\u0026#34; weight = 300 ","date":"2024-08-25","externalUrl":null,"permalink":"/hugos/20240825-3/","section":"Hugo博客相关","summary":"\u003cp\u003e添加时间轴，归档博客。\u003c/p\u003e","title":"hugo博客-blowfish主题添加时间轴","type":"blog"},{"content":"添加音乐组件，并在切换页面时保持音乐播放。\n1. 添加音乐组件 # 1.1 创建music.html文件 # 在layouts/partials目录下创建music.html文件，添加音乐对应参数说明 name: 音乐名， #\u0026lsquo;探故知\u0026rsquo; url: 音乐外链地址，#\u0026lsquo;http://music.163.com/song/media/outer/url?id=2613724903.mp3' artist: 音乐家，#\u0026lsquo;吉泽树\u0026rsquo; cover: 音乐封面，#\u0026lsquo;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp' \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;player1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var ap = new APlayer ({ element: document.getElementById(\u0026#39;player1\u0026#39;), fixed: true, showlrc: false, autoplay: false, mini: true, theme: \u0026#39;#f8f4fc\u0026#39;, loop: \u0026#39;all\u0026#39;, order: \u0026#39;random\u0026#39;, preload: \u0026#39;auto\u0026#39;, volume: 0.4, mutex: true, listFolded: true, listMaxHeight: \u0026#39;500px\u0026#39;, lrcType: 0, music: [ { name: \u0026#39;探故知\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2613724903.mp3\u0026#39;, artist: \u0026#39;吉泽树\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;如果当时2020\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=1488737309.mp3\u0026#39;, artist: \u0026#39;许嵩,朱婷婷\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;如果云知道\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2109099118.mp3\u0026#39;, artist: \u0026#39;许茹芸\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;一生有你\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2017129217.mp3\u0026#39;, artist: \u0026#39;水木年华\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;觉悟\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2030542462.mp3\u0026#39;, artist: \u0026#39;王小帅\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, ] }); //ap.init(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 2. 配置音乐组件在切换页面后仍保持播放 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;player1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var ap = new APlayer ({ element: document.getElementById(\u0026#39;player1\u0026#39;), fixed: true, showlrc: false, autoplay: false, mini: true, theme: \u0026#39;#f8f4fc\u0026#39;, loop: \u0026#39;all\u0026#39;, order: \u0026#39;random\u0026#39;, preload: \u0026#39;auto\u0026#39;, volume: 0.4, mutex: true, listFolded: true, listMaxHeight: \u0026#39;500px\u0026#39;, lrcType: 0, music: [ { name: \u0026#39;探故知\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2613724903.mp3\u0026#39;, artist: \u0026#39;吉泽树\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;如果当时2020\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=1488737309.mp3\u0026#39;, artist: \u0026#39;许嵩,朱婷婷\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;如果云知道\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2109099118.mp3\u0026#39;, artist: \u0026#39;许茹芸\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;一生有你\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2017129217.mp3\u0026#39;, artist: \u0026#39;水木年华\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, { name: \u0026#39;觉悟\u0026#39;, url: \u0026#39;http://music.163.com/song/media/outer/url?id=2030542462.mp3\u0026#39;, artist: \u0026#39;王小帅\u0026#39;, cover: \u0026#39;https://s1.best-wallpaper.net/wallpaper/m/1207/Kitten-greeting_m.webp\u0026#39; }, ] }); //ap.init(); isRecover = false; function ready(){ ap.on(\u0026#39;canplay\u0026#39;, function () { if(!isRecover){ if(localStorage.getItem(\u0026#34;musicIndex\u0026#34;) != null){ musicIndex = localStorage.getItem(\u0026#34;musicIndex\u0026#34;); musicTime = localStorage.getItem(\u0026#34;musicTime\u0026#34;); if(ap.list.index != musicIndex){ ap.list.switch(musicIndex); }else{ ap.seek(musicTime); ap.play(); localStorage.clear(); isRecover = true; } }else{ isRecover = true; } } }); } window.onbeforeunload = function(event) { if(!ap.audio.paused){ musicIndex = ap.list.index; musicTime = ap.audio.currentTime; localStorage.setItem(\u0026#34;musicIndex\u0026#34;,musicIndex); localStorage.setItem(\u0026#34;musicTime\u0026#34;,musicTime); } }; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; ","date":"2024-08-25","externalUrl":null,"permalink":"/hugos/20240825-2/","section":"Hugo博客相关","summary":"\u003cp\u003e添加音乐组件，并在切换页面时保持音乐播放。\u003c/p\u003e","title":"hugo博客-blowfish主题添加音乐组件","type":"blog"},{"content":"","date":"2024-08-25","externalUrl":null,"permalink":"/hugos/","section":"Hugo博客相关","summary":"","title":"Hugo博客相关","type":"hugos"},{"content":"","date":"2024-08-25","externalUrl":null,"permalink":"/tags/music/","section":"Tags","summary":"","title":"Music","type":"tags"},{"content":"","date":"2024-08-23","externalUrl":null,"permalink":"/tags/comments/","section":"Tags","summary":"","title":"Comments","type":"tags"},{"content":"添加giscus，用于博客交流。\n1. 创建评论相关文件 # 1.1 创建comments.html文件 # 在layouts/partials目录下创建comments.html 以下参数来自giscus，具体参考官网https://giscus.app/zh-CN \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;xxx/xxx\u0026#34; data-repo-id=\u0026#34;xxxx\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;xxxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 2. 添加配置 # 2.1 config.toml中添加配置 # 在themes/blowfish/config.toml中添加如下配置 以下参数来自giscus，具体参考官网https://giscus.app/zh-CN [params.giscus] data-repo=\u0026#34;xxx/xxxx\u0026#34; data-repo-id=\u0026#34;xxx\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;xxx\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; 2.2 params.toml中添加配置 # config/_default/params.toml中添加如下配置 showComments = true [article] showDate = true ... showWordCount = true showComments = true ","date":"2024-08-23","externalUrl":null,"permalink":"/hugos/20240823-1/","section":"Hugo博客相关","summary":"\u003cp\u003e添加giscus，用于博客交流。\u003c/p\u003e","title":"hugo博客-blowfish主题添加giscus作为评论系统","type":"blog"},{"content":"本文解决了k8s健康检查时提示unhealthy的问题。\n1.kubectl get cs组件状态异常 # 报错信息提示10251端口拒绝连接 Get \u0026#34;http://127.0.0.1:10251/healthz\u0026#34;: dial tcp 127.0.0.1:10251: connect: connection refused 2. 查看端口状态 # 服务确实未启动 netstat -lnpt |grep 1025 3. 修改kube-scheduler.yaml,注释port=0 # 查看scheduler配置文件是否禁用非安全端口。文件路径在/etc/kubernetes/manifests\ncd /etc/kubernetes/manifests vim kube-scheduler.yaml 4. 再次检查端口及服务 # 一切正常 netstat -lnpt |grep 1025 kubectl get cs 5.其它情况 # 因为本次仅遇到了scheduler的unhealthy的问题，所以仅修改了一个文件，根据经验之谈，如果contoller也是unhealthy的情况\n5.1 contoller也是unhealthy解决方案 # 其它步骤同上，文件需要修改，注释port=0\n/etc/kubernetes/manifests/ 5.2 重启服务 # 本文操作时并未重启服务，修改文件即可，如修改文件不生效，可手动重启服务\nsystemctl restart kubelet.service ","date":"2024-08-11","externalUrl":null,"permalink":"/k8s-solve/20240811-1/","section":"k8s问题解决与记录","summary":"\u003cp\u003e本文解决了k8s健康检查时提示unhealthy的问题。\u003c/p\u003e","title":"k8s（kubectl get cs）健康检查报错","type":"blog"},{"content":"","date":"2024-08-11","externalUrl":null,"permalink":"/tags/unhealthy/","section":"Tags","summary":"","title":"Unhealthy","type":"tags"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/tags/https/","section":"Tags","summary":"","title":"Https","type":"tags"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/tags/os/","section":"Tags","summary":"","title":"Os","type":"tags"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/tags/tools/","section":"Tags","summary":"","title":"Tools","type":"tags"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/tags/wifi/","section":"Tags","summary":"","title":"Wifi","type":"tags"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"windows笔记本wifi连接正常上不了网。\n1. 现象 # 笔记本电脑上一次关机前可正常连接wifi上网 关机后，下一次再开机发现连接wifi正常，但是通过浏览器无法打开网页了 2. 原因 # 某些操作或者代理软件会自动设置局域网代理导致网络不通 3. 解决 # 右键桌面右下角的wifi标志，选择网络和Internet选项 选择最下面的Internet选项 选择第五项连接里面的局域网设置，将代理服务器下面所有的勾选取消 ","date":"2024-07-29","externalUrl":null,"permalink":"/windows/20240729-1/","section":"windows问题解决","summary":"\u003cp\u003ewindows笔记本wifi连接正常上不了网。\u003c/p\u003e","title":"windows笔记本wifi连接正常上不了网","type":"blog"},{"content":"","date":"2024-07-29","externalUrl":null,"permalink":"/windows/","section":"windows问题解决","summary":"","title":"windows问题解决","type":"windows"},{"content":"各类工具网址记录。\n1. 工具类网址 # 1.1 pdf加锁文件解锁网址 # 1.1.1 现象 # 一些pdf文件加锁后忘记密码从而无法编辑 1.1.2 解决 # 通过在线网站进行解锁 https://smallpdf.com/cn/unlock-pdf 1.2 矢量图标下载 # 阿里免费矢量图标下载 https://www.iconfont.cn/ 1.3 在线音乐聚合搜索 # 聚合音乐搜索 https://mp3.ltyuanfang.cn/ 1.4 图片裁剪圆形网址 # https://bigimage.11zon.com/zh-cn/crop-circle-image/ https://crop.imageonline.co/cn/ 1.5 图片压缩 # 在线压缩：\nhttp://v.yalijuda.com:32723/%e5%9b%be%e7%89%87%e5%8e%8b%e7%bc%a9-%e5%89%af%e6%9c%ac-2/ https://www.youcompress.com/zh-cn/ 压缩软件：\n1.5.1 Imagine # Imagine 7 是一款用于压缩 PNG 和 JPEG 的桌面应用程序，用户界面现代而友好。\n特点： 多种格式（JPEG、PNG、WebP） 格式转换 跨平台 GUI 图形用户界面 批量优化 (English, 简体中文, Nederlands, Español, Français, Italiano, Deutsch) https://github.com/meowtec/Imagine 1.6 windows文件夹防丢小助手（DirTag） # 运行DirTag后，当你打开某文件夹（目标是更深处的文件夹），如果存在深处子文件夹已处于打开状态，那么会跳出菜单，单击菜单项即可转到。\n原文地址：小众论坛 http://dogbean.ysepan.com/ 2. 学习类网址 # ","date":"2024-07-29","externalUrl":null,"permalink":"/tools/20240729-1/","section":"工具合集","summary":"\u003cp\u003e各类工具网址记录。\u003c/p\u003e","title":"各类工具网址记录","type":"blog"},{"content":"","date":"2024-03-29","externalUrl":null,"permalink":"/tags/centos7/","section":"Tags","summary":"","title":"Centos7","type":"tags"},{"content":"","date":"2024-03-29","externalUrl":null,"permalink":"/tags/gitlab-ce/","section":"Tags","summary":"","title":"Gitlab-Ce","type":"tags"},{"content":" 1. 启动中文版gitlab-ce容器 # 1.1 自动启动模式 # docker run -d -p 8443:443 -p 8090:80 -p 8022:22 --restart always --name gitlab11 -v /usr/local/gitlab11/etc:/etc/gitlab -v /usr/local/gitlab11/log:/var/log/gitlab -v /usr/local/gitlab11/data:/var/opt/gitlab --privileged=true twang2218/gitlab-ce-zh:11.1 1.2 手动启动调试模式 # docker run -d -p 8443:443 -p 8090:80 -p 8022:22 --restart always --name gitlab11 -v /usr/local/gitlab11/etc:/etc/gitlab -v /usr/local/gitlab11/log:/var/log/gitlab -v /usr/local/gitlab11/data:/var/opt/gitlab --privileged=true twang2218/gitlab-ce-zh:11.1 /bin/bash -c \u0026#34;while true;do sleep 100; done\u0026#34; 调试完成后，启动命令\n/assets/wrapper 执行启动命令有可能会遇到配置不一致问题，需重新加载配置\ngitlab-ctl reconfigure 2. gitlab-ce异常断电调试 # 2.1 GitLab external URL must include a schema and FQDN, e.g. http://gitlab.example.com/ # 解决办法：\nvim /etc/gitlab/gitlab.rb 将\nexternal_url \u0026#39;YYY\u0026#39; 改成\nexternal_url= \u0026#39;http：//本机IP\u0026#39; 2.2 Failed asserting that mode permissions on \u0026ldquo;/var/opt/gitlab/git-data/repositories\u0026rdquo; is 2770 # 解决办法\nchmod 2770 /var/opt/gitlab/git-data/repositories ","date":"2024-03-29","externalUrl":null,"permalink":"/linux/20240329-2/","section":"Linux问题解决","summary":"\u003ch1 class=\"relative group\"\u003e1. 启动中文版gitlab-ce容器 \n    \u003cdiv id=\"1-%E5%90%AF%E5%8A%A8%E4%B8%AD%E6%96%87%E7%89%88gitlab-ce%E5%AE%B9%E5%99%A8\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-%E5%90%AF%E5%8A%A8%E4%B8%AD%E6%96%87%E7%89%88gitlab-ce%E5%AE%B9%E5%99%A8\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1.1 自动启动模式 \n    \u003cdiv id=\"11-%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#11-%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -d -p 8443:443 -p 8090:80 -p 8022:22 --restart always --name gitlab11 -v /usr/local/gitlab11/etc:/etc/gitlab -v /usr/local/gitlab11/log:/var/log/gitlab -v /usr/local/gitlab11/data:/var/opt/gitlab --privileged\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e twang2218/gitlab-ce-zh:11.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pr","title":"Gitlab-ce中文版安装及维护","type":"blog"},{"content":"","date":"2024-03-29","externalUrl":null,"permalink":"/tags/kernel/","section":"Tags","summary":"","title":"Kernel","type":"tags"},{"content":"","date":"2024-03-29","externalUrl":null,"permalink":"/linux/","section":"Linux问题解决","summary":"","title":"Linux问题解决","type":"linux"},{"content":" 1. 参考网站 # centos7 离线升级/在线升级操作系统内核_centos7 red hat enterprise-CSDN博客\n2. 内核下载网站 # http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/\n3. 配置rpm仓库及下载内核rpm包 # 内核包下载好，kernel-ml代表主线版本，总是保持主线最新的内核，kernel-lt代表长期支持版本，支持周期更长，如果你要追求最新的版本，直接选择带ml的rpm包即可，如果你要追求稳定且更长的支持周期，直接选择lt版本即可。 rpm -Uvh http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/elrepo-release-7.0-8.el7.elrepo.noarch.rpm # 6.9.7版本：http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/kernel-ml-6.9.7-1.el7.elrepo.x86_64.rpm wget http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS/kernel-lt-5.4.203-1.el7.elrepo.x86_64.rpm 4. 安装(Centos7系统) # rpm -ivh kernel-lt-5.4.203-1.el7.elrepo.x86_64.rpm 4.1 修改内核启动顺序 # 修改文件：/etc/default/grub 使 GRUB_DEFAULT=0 GRUB_TIMEOUT=5 GRUB_DISTRIBUTOR=\u0026#34;$(sed \u0026#39;s, release .*$,,g\u0026#39; /etc/system-release)\u0026#34; # 改GRUB_DEFAULT=saved为0 GRUB_DEFAULT=0 GRUB_DISABLE_SUBMENU=true GRUB_TERMINAL_OUTPUT=\u0026#34;gfxterm\u0026#34; GRUB_CMDLINE_LINUX=\u0026#34;rhgb quiet nomodeset\u0026#34; GRUB_DISABLE_RECOVERY=\u0026#34;true\u0026#34; 设置默认启动内核，grub2-set-default 0和/etc/default/grub文件里的GRUB_DEFAULT=0意思一样 grub2-set-default 0 查看所有内核 awk -F\\\u0026#39; \u0026#39;$1==\u0026#34;menuentry \u0026#34; {print i++ \u0026#34; : \u0026#34; $2}\u0026#39; /boot/grub2/grub.cfg 重新生成grub配置文件 grub2-mkconfig -o /boot/grub2/grub.cfg 重启并查看内核板板 reboot uname -r 4.2 多余内核删除 # 在 CentOS 7 中删除多余内核的步骤通常如下：\n在执行删除操作时务必小心，确保你不会误删当前正在使用的内核，否则可能导致系统无法正常启动。如果不确定哪些内核可以安全删除，建议仅删除明确标记为旧版本且确认未被当前系统使用的内核。 4.3 确认当前使用的内核版本 # 打开终端，输入以下命令来查看当前系统正在使用的内核版本： uname -r 4.4 查询已安装的所有内核版本 # 使用 rpm 命令列出所有与内核相关的包： rpm -qa | grep kernel 这将列出包括当前正在使用的内核在内的所有内核版本。 4.5 确定要删除的内核 # 确保不要删除当前正在使用的内核版本。通常，安全的做法是至少保留一个或两个旧内核作为备用。 删除多余的内核\n使用 yum 命令来删除不再需要的内核版本。例如，如果你要删除 kernel-3.10.0-1127.el7.x86_64 这个版本，可以运行： sudo yum remove kernel-ml-6.9.7-1.el7.elrepo.x86_64 对于每个不需要的内核重复此步骤。\n4.6 更新引导加载器配置 # 删除内核后，需要更新 GRUB 配置以反映这些更改： sudo grub2-mkconfig -o /boot/grub2/grub.cfg 4.7 重启系统 # -（可选）如果你确信没有删除正在使用的内核，并且所有操作都已完成，可以选择重启系统以应用更改\nreboot ","date":"2024-03-29","externalUrl":null,"permalink":"/linux/20240329-1/","section":"Linux问题解决","summary":"\u003ch1 class=\"relative group\"\u003e1. 参考网站 \n    \u003cdiv id=\"1-%E5%8F%82%E8%80%83%E7%BD%91%E7%AB%99\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-%E5%8F%82%E8%80%83%E7%BD%91%E7%AB%99\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/yaxuan88521/article/details/129946104?spm=1001.2101.3001.6650.2\u0026amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-129946104-blog-136274022.235%5Ev43%5Econtrol\u0026amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-129946104-blog-136274022.235%5Ev43%5Econtrol\u0026amp;utm_relevant_index=5\" target=\"_blank\"\u003ecentos7 离线升级/在线升级操作系统内核_centos7 red hat enterprise-CSDN博客\u003c/a\u003e\u003c/p\u003e","title":"Linux系统内核升级","type":"blog"},{"content":"OwnerReference和Finalizers.\n1.OwnerReference # 设置了OwnerReference以后，会在k8s资源间建立从属关系，当删除属主（即父资源）时，其从属资源（即子资源）也会跟着删除，这就是k8s中的级联删除\n1.1 OwnerReference中的属性 # ApiVersion：属主资源的api版本 Kind：属主资源的类型，例如deployment，pod等 Name：属主资源的名称 Uid：属主资源的唯一标识 Controller：当Controller属性为true时，表示资源对象是一个控制器（如Deployment、ReplicaSet等），它管理着其他资源对象（如Pod、Service等）的创建和生命周期。个人理解为：当一个资源有多个属主时，其中为true的属主会监视该资源的变化 BlockOwnerDeletion：根据它来判断从属资源的删除是否会阻塞属主资源的删除；当BlockOwnerDeletion为true，并且删除策略为前台删除（foreground）时，属主资源会等待从属资源删完后，才会删除，表现在go-client接口中即为要等待该属主资源及其所有从属资源完全删除后，才会返回该删除接口的结果；当BlockOwnerDeletion设置为false时，从属资源的删除不会阻塞属主资源的删除。 1.2 k8s中的删除策略 # foreground（前台删除）：先删除从属资源，再删除属主资源（一般与BlockOwnerDeletion=true结合使用） background（后台删除）：先删除属主资源，再在后台删除从属资源（默认策略） orphan（孤儿删除）：不考虑OwnerReference，只删除该资源，不级联删除 1.3 BlockOwnerDeletion与删除策略结合使用 # 从属资源的BlockOwnerDeletion为true，删除策略为前台删除：删除属主资源时，会等待从属资源被删除后，才会删除属主资源，然后返回删除结果；与go-client结合来看就是，等属主资源和其所有的从属资源都被删除后，删除接口才会返回结果 从属资源的BlockOwnerDeletion为false，删除策略为前台删除时：删除属主资源时，不会等待从属资源的删除，会直接返回删除结果；与go-client结合来看就是，删除接口会立即返回结果 删除策略为后台删除时，都会直接返回删除结果，后台删除不会等待从属资源的删除 2.Finalizers # Finalizers是metadata中的一个数组类型的标签，当k8s资源存在Finalizers标签，删除该资源时，会阻塞该资源的删除，直到Finalizers为空时，才会将该资源真正删除\n2.1 Finalizers的工作原理 # 当删除存在Finalizers标签的资源时，处理删除请求的api会为该资源的metadata标签中添加DeletionTimeStamp标签（该标签为下发删除请求的时间），并且会更改该资源的状态为Terminating状态，此时该资源并没有被完全删除，处于只可见状态；此时控制器会尽量满足该资源的Finalizers的要求，每达到一个要求，就会删去该Finalizers，直到所有的Finalizers全被删除时，该资源才会被真正删除\n","date":"2024-03-11","externalUrl":null,"permalink":"/kubernetes/20240311-4/","section":"Kubernetes","summary":"\u003cp\u003eOwnerReference和Finalizers.\u003c/p\u003e","title":"【Kubernetes知识】OwnerReference和Finalizers","type":"blog"},{"content":"","date":"2024-03-11","externalUrl":null,"permalink":"/tags/pod/","section":"Tags","summary":"","title":"Pod","type":"tags"},{"content":"","date":"2024-03-11","externalUrl":null,"permalink":"/tags/spec/","section":"Tags","summary":"","title":"Spec","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/api/","section":"Tags","summary":"","title":"Api","type":"tags"},{"content":"实现docker及containerd镜像代理配置。\n1. docker配置代理 # 修改docker配置： /etc/docker/daemon.json \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://xxx.xxx.xxx\u0026#34; ], 重启服务 systemctl daemon-reload systemctl restart docker 拉取镜像测试\ndocker pull nginx 2. containerd配置代理 # 修改docker配置： /etc/containerd/config.toml [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors.\u0026#34;docker.io\u0026#34;] endpoint = [\u0026#34;https://xxx.xxx.xxx\u0026#34;] 重启服务 systemctl daemon-reload systemctl restart containerd 拉取镜像测试\ncrictl pull nginx ","date":"2023-03-11","externalUrl":null,"permalink":"/kubernetes/20230311-1/","section":"Kubernetes","summary":"\u003cp\u003e实现docker及containerd镜像代理配置。\u003c/p\u003e","title":"docker及containerd镜像代理配置","type":"blog"},{"content":"实现docker远程操作api（2375端口）开放。\n1. 检查2375端口是否开启 # netstat -tuln | grep 2375 如果已开启，则会出现如下日志\nroot@work01:~# netstat -tuln | grep 2375 tcp6 0 0 :::2375 :::* LISTEN 如果未输出以上日志，则进入下一步开启2375端口\n2. 开启2375端口 # 2.1 修改docker配置文件: /etc/docker/daemon.json # 新增如下配置 这段配置的意思是允许Docker监听在0.0.0.0的2375端口上，这样就可以远程访问Docker { \u0026#34;hosts\u0026#34;: [\u0026#34;tcp://0.0.0.0:2375\u0026#34;, \u0026#34;unix:///var/run/docker.sock\u0026#34;] } 2.2 重启docker # systemctl restart docker ","date":"2023-03-11","externalUrl":null,"permalink":"/kubernetes/20230311-2/","section":"Kubernetes","summary":"\u003cp\u003e实现docker远程操作api（2375端口）开放。\u003c/p\u003e","title":"docker开放远程操作api（2375）","type":"blog"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/pvc/","section":"Tags","summary":"","title":"Pvc","type":"tags"},{"content":" 仅限PVC绑定其它未删除POD且自身处于terminating状态。\n1. 修改pvc对应pv的回收策略为Retain # 1.1 编辑对应pvc # kubectl edit pv pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 修改策略为Retain后，保存并退出 2. 停止相关pod # 2.1 单pod服务（直接删除服务） # 2.2 多副本pod服务（降低副本数量为0） # 2.3 删除pv所绑定的旧pvc信息 # kubectl edit pv pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 删除对应7行信息，保存并退出 claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: system-minio namespace: ai-education resourceVersion: \u0026#34;87954836\u0026#34; uid: 18c818e0-3e4c-45b0-8156-5d61fbfd6296 3. 重新申请pvc绑定指定pv # 3.1 查看pv状态为available # 3.2 申请pvc # kubectl apply -f k8s-pvc2.yaml k8s-pvc2.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: system-minio # 原pvc name namespace: ai-education # 原pvc namespace spec: accessModes: - ReadWriteOnce # 原pv 读写模式 resources: requests: storage: 8Gi # 原pv 容量 volumeName: pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 # 原pv name ","date":"2023-03-11","externalUrl":null,"permalink":"/volume-solve/20230311-1/","section":"云存储问题解决","summary":"\u003cblockquote\u003e\n\u003cp\u003e仅限PVC绑定其它未删除POD且自身处于terminating状态。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"PVC误删除后恢复操作","type":"blog"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/volume/","section":"Tags","summary":"","title":"Volume","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/volume-solve/","section":"云存储问题解决","summary":"","title":"云存储问题解决","type":"volume-solve"},{"content":"k8s网络问题解决记录\n1. k8s(1):calico网络问题排查，IP_AUTODETECTION_METHOD # 引用： https://zhuanlan.zhihu.com/p/488034895?utm_id=0\n问题描述： 4个节点的k8s集群，忽然有个节点上的pod无法访问其他节点的k8s域名了\n排查 ①查看coredns服务状态，发现正常，排除内部dns解析问题 ②查看发现异常pod节点对应的calico-node-rdw97服务异常，出现了非正常使用网卡信息 ③查看calico配置发现，网卡配置为P_AUTODETECTION_METHOD： first_found，这样很容易选错网卡 解决：查看并修改calico node的daemonset配置：(vim环境) kubectl edit DaemonSet calico-node -n calico-system\n发现: IP_AUTODETECTION_METHOD 这个环境变量\n的值是first_found，我的机器网上eth0并不是第一个，这样可能有问题。因此修改成 value: \u0026ldquo;interface=eth0\u0026rdquo; 并保存退出，居然没生效。\n原因是：\n该方法命令虽然可以执行，但是我这里ds么没有生效。k8s 1.22，通过operator生成的calico，不是calico.yaml，如果是calico.yaml，直接修改文件中的参数即可。（calico-node报错Readiness probe failed: calico/node is not ready: BIRD is not ready: Error querying BIRD: unable to connect to BIRDv4 socket - Wghdr\u0026rsquo;s Blog!）\n解决2： 因此要用另一种方法来修改：\n我的custom-resources.yaml 如下，加上红色部分：\ncustom-resources.yaml nodeAddressAutodetectionV4: interface: eno.* # This section includes base Calico installation configuration. # For more information, see: https://projectcalico.docs.tigera.io/v3.22/reference/installation/api#operator.tigera.io/v1.Installation apiVersion: operator.tigera.io/v1 kind: Installation metadata: name: default spec: # Configures Calico networking. registry: sea.hub:5000 calicoNetwork: # Note: The ipPools section cannot be modified post-install. ipPools: - blockSize: 26 cidr: 100.64.0.0/10 encapsulation: VXLANCrossSubnet natOutgoing: Enabled nodeSelector: all() nodeAddressAutodetectionV4: interface: eno.* --- # This section configures the Calico API server. # For more information, see: https://projectcalico.docs.tigera.io/v3.22/reference/installation/api#operator.tigera.io/v1.APIServer apiVersion: operator.tigera.io/v1 kind: APIServer metadata: name: default spec: {} 然后重新执行： kubectl apply -f custom-resources.yaml 然后再：\nkubectl set env ds/calico-node -n calico-system IP_AUTODETECTION_METHOD=interface=eno3 可能会出现的问题，calico-apiserver-5787fcd448-s56vz出现异常，并报ImageNameError,查找发现yaml中定义的ImageName不知为何少了一个/，添加后重启服务即可 ","date":"2023-02-11","externalUrl":null,"permalink":"/cloudnetissues/20230211-3/","section":"云原生网络知识集合","summary":"\u003cp\u003ek8s网络问题解决记录\u003c/p\u003e","title":"k8s网络问题解决记录","type":"blog"},{"content":"","date":"2023-02-11","externalUrl":null,"permalink":"/tags/service/","section":"Tags","summary":"","title":"Service","type":"tags"},{"content":"","date":"2023-02-11","externalUrl":null,"permalink":"/cloudnetissues/","section":"云原生网络知识集合","summary":"","title":"云原生网络知识集合","type":"cloudnetissues"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/command/","section":"Tags","summary":"","title":"Command","type":"tags"},{"content":"收集各类常见kubernetes命令。\n1. 取消主节点禁止调度污点 # ● 较旧版本\nkubectl taint node k3s01 node-role.kubernetes.io/master:NoSchedule- ● 较新版本：\nkubectl taint node k3s01 node-role.kubernetes.io/control-plane:NoSchedule- ","date":"2022-03-12","externalUrl":null,"permalink":"/kubernetes/20220312-3/","section":"Kubernetes","summary":"\u003cp\u003e收集各类常见kubernetes命令。\u003c/p\u003e","title":"Kubernetes命令集合","type":"blog"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/sh/","section":"Tags","summary":"","title":"Sh","type":"tags"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/coding/","section":"Tags","summary":"","title":"Coding","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/go/","section":"Go语言","summary":"","title":"Go语言","type":"go"},{"content":" 实现k8s端口号定义及分配\n1. NodePort 范围 # 在 Kubernetes 集群中，NodePort 默认范围是 30000-32767\n2. 增大NodePort范围 # 修改kube-apiserver.yaml文件\n● 使用 kubeadm 安装 K8S 集群的情况下，您的 Master 节点上会有一个文件 /etc/kubernetes/manifests/kube-apiserver.yaml，修改此文件，向其中添加 \u0026ndash;service-node-port-range=20000-22767 （定义需要的端口范围），如下所示：\napiVersion: v1 kind: Pod ... ... ... ... - --service-account-key-file=/etc/kubernetes/pki/sa.pub - --service-node-port-range=20000-22767 - --service-cluster-ip-range=10.96.0.0/22 ... ... ... ... 3. 重启kube-apiserver # # 获得 apiserver 的 pod 名字 export apiserver_pods=$(kubectl get pods --selector=component=kube-apiserver -n kube-system --output=jsonpath={.items..metadata.name}) # 删除 apiserver 的 pod kubectl delete pod $apiserver_pods -n kube-system 4.验证结果 # ● 执行以下命令查看相关pod\nkubectl describe pod $apiserver_pods -n kube-system 注意:\n● 对于已经创建的NodePort类型的Service，需要删除重新创建\n● 如果集群有多个 Master 节点，需要逐个修改每个节点上的 /etc/kubernetes/manifests/kube-apiserver.yaml 文件，并重启 apiserver\n","date":"2022-03-11","externalUrl":null,"permalink":"/cloudnetissues/20220311-1/","section":"云原生网络知识集合","summary":"\u003ch5 id=\"typeit-c2ef07445b197a99457be36a816dd2c7\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-c2ef07445b197a99457be36a816dd2c7\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\u003cp\u003e实现k8s端口号定义及分配\u003c/p\u003e","title":"k8s端口号定义及分配","type":"blog"},{"content":" 实现k8s容器间免密访问方案\nPod 使用同样的私钥/公钥，可以互相免密访问 只需生成同样的 id_rsa和 id_rsa.pub，然后将 authorized_keys的内容设为id_rsa.pub一致。也即将相同的配置文件挂载到不同的Pod上即可\nconfig文件配置\n将 id_rsa,id_rsa.pub,authorized_keys,config作为 configmap的内容。 # 第一次访问时，无需确认，直接连接 StrictHostKeyChecking no UserKnownHostsFile /dev/null # pod 间无法通过 hostname 直接访问对方的，因此需要 service Host pod-hostname-1 HostName pod-hostname-1.service-name Host pod-hostname-2 HostName pod-hostname-2.service-name 1. Pod 主机名解析 # 1.1 pod 间无法通过 hostname 直接访问对方的，因此需要 service： # 可以参考 Pod 间通信； 1.1.1 启动带 Pod 间通信的 Job # 要在某 Job 中启用使用 Pod 主机名的 Pod 间通信，你必须执行以下操作：\n对于 Job 所创建的那些 Pod， 使用一个有效的标签选择算符创建无头服务。 该无头服务必须位于与该 Job 相同的名字空间内。 实现这一目的的一种简单的方式是使用 job-name: \u0026lt;任务名称\u0026gt; 作为选择算符， 因为 job-name 标签将由 Kubernetes 自动添加。 此配置将触发 DNS 系统为运行 Job 的 Pod 创建其主机名的记录。 通过将以下值包括到你的 Job 模板规约中，针对该 Job 的 Pod，将无头服务配置为其子域服务： subdomain: \u0026lt;无头服务的名称\u0026gt; 示例:以下是启用通过 Pod 主机名来完成 Pod 间通信的 Job 示例。 只有在使用主机名成功 ping 通所有 Pod 之后，此 Job 才会结束。\n说明： # 在以下示例中的每个 Pod 中执行的 Bash 脚本中，如果需要从名字空间外到达 Pod， Pod 主机名也可以带有该名字空间作为前缀。\napiVersion: v1 kind: Service metadata: name: headless-svc spec: clusterIP: None # clusterIP 必须为 None 以创建无头服务 selector: job-name: example-job # 必须与 Job 名称匹配 --- apiVersion: batch/v1 kind: Job metadata: name: example-job spec: completions: 3 parallelism: 3 completionMode: Indexed template: spec: subdomain: headless-svc # 必须与 Service 名称匹配 restartPolicy: Never containers: - name: example-workload image: bash:latest command: - bash - -c - | for i in 0 1 2 do gotStatus=\u0026#34;-1\u0026#34; wantStatus=\u0026#34;0\u0026#34; while [ $gotStatus -ne $wantStatus ] do ping -c 1 example-job-${i}.headless-svc \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 gotStatus=$? if [ $gotStatus -ne $wantStatus ]; then echo \u0026#34;Failed to ping pod example-job-${i}.headless-svc, retrying in 1 second...\u0026#34; sleep 1 fi done echo \u0026#34;Successfully pinged pod: example-job-${i}.headless-svc\u0026#34; done 应用上述示例之后，使用 \u0026lt;Pod 主机名\u0026gt;.\u0026lt;无头服务名\u0026gt; 通过网络到达彼此。 你应看到类似以下的输出：\nkubectl logs example-job-0-qws42 Failed to ping pod example-job-0.headless-svc, retrying in 1 second... Successfully pinged pod: example-job-0.headless-svc Successfully pinged pod: example-job-1.headless-svc Successfully pinged pod: example-job-2.headless-svc 说明：谨记此例中使用的 \u0026lt;Pod 主机名\u0026gt;.\u0026lt;无头服务名称\u0026gt; 名称格式不适用于设置为 None 或 Default 的 DNS 策略。 你可以在此处了解有关 Pod DNS 策略的更多信息。\n1.2 hostname 必须是规则化，才可以静态生成所有的主机名： # 可以用 Statefulset 或者 IndexJob 来生成有规则的 hostname。 1.3 Pod 挂载 SSH ConfigMap # 想要免密，则 Pod 上挂载相应的configmap 即可。\nspec: containers: volumeMounts: - name: ssh-config mountPath: /root/.ssh # use subpath to avoid soft link subPath: .ssh volumes: - name: ssh-config configMap: name: ssh-config-cm defaultMode: 0600 items: - key: PRIVATE_KEY path: .ssh/id_rsa - key: PUBLIC_KEY path: .ssh/id_rsa.pub - key: AUTHORIZED_KEYS path: .ssh/authorized_keys - key: CONFIG path: .ssh/config ","date":"2022-03-11","externalUrl":null,"permalink":"/cloudnetissues/20220311-2/","section":"云原生网络知识集合","summary":"\u003ch5 id=\"typeit-b20707817a1a961b2a788c0f2e033193\"\u003e\u003c/h5\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-b20707817a1a961b2a788c0f2e033193\", {\n        strings: [\"\\\"无聊望见了犹豫, 达到理想不太易~\\\"\",\"\"],\n        speed:  80 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\u003cp\u003e实现k8s容器间免密访问方案\u003c/p\u003e","title":"k8s容器间免密访问方案","type":"blog"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/nossh/","section":"Tags","summary":"","title":"Nossh","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/port/","section":"Tags","summary":"","title":"Port","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"Ssh","type":"tags"},{"content":"本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\n标题 # 以下 HTML 元素 \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 表示六个级别的标题。 \u0026lt;h1\u0026gt; 是最高的标题级别，而 \u0026lt;h6\u0026gt; 是最低的。\nH1 # H2 # H3 # H4 # H5 # H6 # 段落 # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n块引用 # 块引用表示从其他来源引用的内容，可以用于位于 footer 或 cite 元素内的引文，并且可以表示一些补充说明（例如注释和缩写）。\n没有参考链接的块引用 # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n有参考链接的块引用 # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 # 表格不是核心 Markdown 规范的一部分，但 Hugo 支持渲染。\nName Age Bob 27 Alice 23 表格内内联 Markdown # Italics Bold Code italics bold code 代码块 # 带反引号的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 带有 Hugo 内部高亮简码的代码块 # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 # 有序列表 # First item Second item Third item 无序列表 # List item Another item And another item 嵌套列表 # Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr、sub、sup、kbd、mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n上述引文摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的谈论“什么都没有”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-03-11","externalUrl":null,"permalink":"/go/20220311-1/","section":"Go语言","summary":"\u003cp\u003e本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\u003c/p\u003e","title":"Windows配置Go环境","type":"blog"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83/","section":"Tags","summary":"","title":"环境","type":"tags"},{"content":"","date":"2017-07-17","externalUrl":null,"permalink":"/archives/","section":"欢迎来到云一二三知识库! 🎉","summary":"","title":"时间轴","type":"archives"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/code-languages/","section":"编程语言","summary":"","title":"编程语言","type":"code-languages"},{"content":"","externalUrl":null,"permalink":"/skill-tech/","section":"奇淫技巧","summary":"","title":"奇淫技巧","type":"skill-tech"},{"content":"","externalUrl":null,"permalink":"/cloudstorage/","section":"云原生存储","summary":"","title":"云原生存储","type":"cloudstorage"},{"content":"","externalUrl":null,"permalink":"/cloudnet/","section":"云原生网络","summary":"","title":"云原生网络","type":"cloudnet"}]