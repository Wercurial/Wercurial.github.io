
[{"content":" Blowfish 包含了大量的特性功能。 Blowfish 的目标是开发一个简单且轻量级的主题。 该主题是 Congo 的一个分支，并进行了大量扩展。\nTailwind CSS 3.0 # Tailwind CSS 是 Blowfish 的核心，当前版本包含了最新的Tailwind CSS version 3。 Tailwind CSS 带来了性能优化，并提供了一些出色的新的 CSS 特性。\n多语言支持 # 这是一个高频需求，Blowfish 现在支持多语言！ 如果你使用多语言发布你的内容，网站将会构建包含所有可用翻译的版本。\n:gb: :de: :fr: :es: :cn: :brazil: :tr: :bangladesh: 感谢社区的贡献，目前 Blowfish 已经翻译成二十六种语言，并且随着时间的推移还会支持更多。 顺便一提，欢迎你为支持新语言提交 PR。\n支持 RTL 语言 # 新版本的Tailwind和多语言特性可以支持 RTL 语言。\n启用 RTL 后，整个网站将会从右到左重新生成内容。主题中的所有元素都会重新风格化，以适应这种模式，有助于 RTL 语言者。\nRTL 是基于单独语言控制的，所以你可以在项目中通过支持多语言来混合使用 RTL 和 LTR，主题会相应做出适配。\n自动调整图片大小 # Blowfish 2.0版本的重大变化是增加了自动调整图片大小的功能。基于 Hugo Pipes 提供的能力，实现了 Markdown 中的图片自动缩放到不同尺寸的功能。同时 Blowfish 2.0 还支持了 HTML srcset 以实现响应式图像，这能够为访问者优化图片大小。\n\u0026lt;!-- Markdown: ![My image](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w, /image_1270x0_resize_q75_box.jpg 2x\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;My image\u0026#34; /\u0026gt; 当然这一切都不需要你做任何改动！只需要在 Markdown 中插入标准的图片元素，Blowfish 主题会自动帮你完成这些。\n如果你想要图片变得更可控一些，你可以使用短代码 figure 。 figure 已经被完全重写，用于提供类似调整大小的功能优势。\n站点搜索 # 基于 Fuse.js 提供的模糊搜索，访问者可以快速轻松地找到想要的内容。所有的模糊搜索都在客户端完成，不需要服务端做任何配置，同时保证了搜索的执行速度。只需要你在网站配置中启用这个功能就可以运行！哦，它甚至还支持全键盘导航！\n目录 # 这也是一个高频的需求，Blowfish 现在支持在文章内容页面中使用目录。你可以在本页面看到它的实际效果。目录完全是响应式的，并且会在不同屏幕分辨率下进行自动调整。\n目录可以给予全局或者每篇文章，也可以使用标准的 Hugo 配置来完全定制化，允许你根据自己的项目调整。\n可访问性改进 # 这个版本是至今为止最易访问的！Blowfish 不仅为更多项目提供了 ARIA 描述，还简单地调整了某些文本元素的对比度。\n不仅如此，Blowfish 2.0 引入了 “跳转到内容” 和 “滚动到顶部” 的功能，使得导航更加便捷。你甚至可以仅用键盘快捷键来使用像搜索这样的功能，不需要使用鼠标哦~\n新功能图片大小调节还提供了对 alt 和 title 元素的完全控制，为所有访问者提供一个无障碍的体验。\n更多更多 # 当然还有无数其他的功能等待你的探索。例如在文章和列表页面显示分类、使用 headline 作者参数来定制你的主页，还有使用改进 JSON-LD 结构化数据，从而进一步优化了 SEO 性能等等。\n结语 # 欢迎来尝试和探索强大而轻量的 Blowfish 2.0，打造优雅、个性化的创作之旅！\n如果你对 Blowfish 有更加创意的想法，欢迎随时提交，期待与你共同营造 Blowfish 的开源文化！\n","externalUrl":null,"permalink":"/cloudnative/welcome/","section":"文档","summary":"Blowfish 包含了大量的特性功能。 Blowfish 的目标是开发一个简单且轻量级的主题","title":"欢迎来到 Blowfish","type":"cloudnative"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/download/","section":"Tags","summary":"","title":"Download","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/file/","section":"Tags","summary":"","title":"File","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/gs/","section":"Tags","summary":"","title":"Gs","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-08-29","externalUrl":null,"permalink":"/","section":"欢迎来到云一二三知识库! 🎉","summary":"","title":"欢迎来到云一二三知识库! 🎉","type":"page"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2024-08-29","externalUrl":null,"permalink":"/filedown/","section":"文件下载","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"文件下载","type":"filedown"},{"content":"本文提供了下载gs协议的文件方案。\n通过将gs://后的文件或文件夹地址拼接到https://storage.googleapis.com即可\n1. 原始文件地址 # gs://kfserving-examples/models/sklearn/1.0/model/model.joblib 2. 转换后的下载地址 # https://storage.googleapis.com/kfserving-examples/models/sklearn/1.0/model/model.joblib ","date":"2024-08-29","externalUrl":null,"permalink":"/filedown/%E4%B8%8B%E8%BD%BDgs%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%96%87%E4%BB%B6/","section":"文件下载","summary":"\u003cp\u003e本文提供了下载gs协议的文件方案。\u003c/p\u003e","title":"下载gs协议的文件","type":"skill-tech"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2024-08-26","externalUrl":null,"permalink":"/calico/","section":"calico","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"calico","type":"calico"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/calico/deploy/","section":"calico","summary":"这是一个标题 #","title":"First","type":"calico"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/ceph/deploy/","section":"RookCeph存储","summary":"这是一个标题 #","title":"First","type":"ceph"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/longhorn/deploy/","section":"longhorn存储","summary":"这是一个标题 #","title":"First","type":"longhorn"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2024-08-26","externalUrl":null,"permalink":"/longhorn/","section":"longhorn存储","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"longhorn存储","type":"longhorn"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2024-08-26","externalUrl":null,"permalink":"/ceph/","section":"RookCeph存储","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"RookCeph存储","type":"ceph"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/calico/bug%E8%A7%A3%E5%86%B3/","section":"calico","summary":"这是一个标题 #","title":"解决bug","type":"calico"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/ceph/bug%E8%A7%A3%E5%86%B3/","section":"RookCeph存储","summary":"这是一个标题 #","title":"解决bug","type":"ceph"},{"content":" 这是一个标题 # ","date":"2024-08-26","externalUrl":null,"permalink":"/longhorn/bug%E8%A7%A3%E5%86%B3/","section":"longhorn存储","summary":"这是一个标题 #","title":"解决bug","type":"longhorn"},{"content":"OwnerReference和Finalizers.\n1.OwnerReference # 设置了OwnerReference以后，会在k8s资源间建立从属关系，当删除属主（即父资源）时，其从属资源（即子资源）也会跟着删除，这就是k8s中的级联删除\n1.1 OwnerReference中的属性 # ApiVersion：属主资源的api版本 Kind：属主资源的类型，例如deployment，pod等 Name：属主资源的名称 Uid：属主资源的唯一标识 Controller：当Controller属性为true时，表示资源对象是一个控制器（如Deployment、ReplicaSet等），它管理着其他资源对象（如Pod、Service等）的创建和生命周期。个人理解为：当一个资源有多个属主时，其中为true的属主会监视该资源的变化 BlockOwnerDeletion：根据它来判断从属资源的删除是否会阻塞属主资源的删除；当BlockOwnerDeletion为true，并且删除策略为前台删除（foreground）时，属主资源会等待从属资源删完后，才会删除，表现在go-client接口中即为要等待该属主资源及其所有从属资源完全删除后，才会返回该删除接口的结果；当BlockOwnerDeletion设置为false时，从属资源的删除不会阻塞属主资源的删除。 1.2 k8s中的删除策略 # foreground（前台删除）：先删除从属资源，再删除属主资源（一般与BlockOwnerDeletion=true结合使用） background（后台删除）：先删除属主资源，再在后台删除从属资源（默认策略） orphan（孤儿删除）：不考虑OwnerReference，只删除该资源，不级联删除 1.3 BlockOwnerDeletion与删除策略结合使用 # 从属资源的BlockOwnerDeletion为true，删除策略为前台删除：删除属主资源时，会等待从属资源被删除后，才会删除属主资源，然后返回删除结果；与go-client结合来看就是，等属主资源和其所有的从属资源都被删除后，删除接口才会返回结果 从属资源的BlockOwnerDeletion为false，删除策略为前台删除时：删除属主资源时，不会等待从属资源的删除，会直接返回删除结果；与go-client结合来看就是，删除接口会立即返回结果 删除策略为后台删除时，都会直接返回删除结果，后台删除不会等待从属资源的删除 2.Finalizers # Finalizers是metadata中的一个数组类型的标签，当k8s资源存在Finalizers标签，删除该资源时，会阻塞该资源的删除，直到Finalizers为空时，才会将该资源真正删除\n2.1 Finalizers的工作原理 # 当删除存在Finalizers标签的资源时，处理删除请求的api会为该资源的metadata标签中添加DeletionTimeStamp标签（该标签为下发删除请求的时间），并且会更改该资源的状态为Terminating状态，此时该资源并没有被完全删除，处于只可见状态；此时控制器会尽量满足该资源的Finalizers的要求，每达到一个要求，就会删去该Finalizers，直到所有的Finalizers全被删除时，该资源才会被真正删除\n","date":"2024-03-11","externalUrl":null,"permalink":"/kubernetes/ownerreference%E5%92%8Cfinalizers/","section":"Kubernetes","summary":"\u003cp\u003eOwnerReference和Finalizers.\u003c/p\u003e","title":"【Kubernetes知识】OwnerReference和Finalizers","type":"Kubernetes"},{"content":"","date":"2024-03-11","externalUrl":null,"permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2024-03-11","externalUrl":null,"permalink":"/kubernetes/","section":"Kubernetes","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"Kubernetes","type":"kubernetes"},{"content":"","date":"2024-03-11","externalUrl":null,"permalink":"/tags/pod/","section":"Tags","summary":"","title":"Pod","type":"tags"},{"content":"","date":"2024-03-11","externalUrl":null,"permalink":"/tags/spec/","section":"Tags","summary":"","title":"Spec","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/api/","section":"Tags","summary":"","title":"Api","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/containerd/","section":"Tags","summary":"","title":"Containerd","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"实现docker及containerd镜像代理配置。\n1. docker配置代理 # 修改docker配置： /etc/docker/daemon.json \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://xxx.xxx.xxx\u0026#34; ], 重启服务 systemctl daemon-reload systemctl restart docker 拉取镜像测试\ndocker pull nginx 2. containerd配置代理 # 修改docker配置： /etc/containerd/config.toml [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors] [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.registry.mirrors.\u0026#34;docker.io\u0026#34;] endpoint = [\u0026#34;https://xxx.xxx.xxx\u0026#34;] 重启服务 systemctl daemon-reload systemctl restart containerd 拉取镜像测试\ncrictl pull nginx ","date":"2023-03-11","externalUrl":null,"permalink":"/kubernetes/docker%E5%8F%8Acontainerd%E9%95%9C%E5%83%8F%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/","section":"Kubernetes","summary":"\u003cp\u003e实现docker及containerd镜像代理配置。\u003c/p\u003e","title":"docker及containerd镜像代理配置","type":"Kubernetes"},{"content":"实现docker远程操作api（2375端口）开放。\n1. 检查2375端口是否开启 # netstat -tuln | grep 2375 如果已开启，则会出现如下日志\nroot@work01:~# netstat -tuln | grep 2375 tcp6 0 0 :::2375 :::* LISTEN 如果未输出以上日志，则进入下一步开启2375端口\n2. 开启2375端口 # 2.1 修改docker配置文件: /etc/docker/daemon.json # 新增如下配置 这段配置的意思是允许Docker监听在0.0.0.0的2375端口上，这样就可以远程访问Docker { \u0026#34;hosts\u0026#34;: [\u0026#34;tcp://0.0.0.0:2375\u0026#34;, \u0026#34;unix:///var/run/docker.sock\u0026#34;] } 2.2 重启docker # systemctl restart docker ","date":"2023-03-11","externalUrl":null,"permalink":"/kubernetes/docker%E5%BC%80%E6%94%BE%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9Capi2375/","section":"Kubernetes","summary":"\u003cp\u003e实现docker远程操作api（2375端口）开放。\u003c/p\u003e","title":"docker开放远程操作api（2375）","type":"Kubernetes"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/proxy/","section":"Tags","summary":"","title":"Proxy","type":"tags"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/pvc/","section":"Tags","summary":"","title":"Pvc","type":"tags"},{"content":" 仅限PVC绑定其它未删除POD且自身处于terminating状态。\n1. 修改pvc对应pv的回收策略为Retain # 1.1 编辑对应pvc # kubectl edit pv pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 修改策略为Retain后，保存并退出 2. 停止相关pod # 2.1 单pod服务（直接删除服务） # 2.2 多副本pod服务（降低副本数量为0） # 2.3 删除pv所绑定的旧pvc信息 # kubectl edit pv pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 删除对应7行信息，保存并退出 claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: system-minio namespace: ai-education resourceVersion: \u0026#34;87954836\u0026#34; uid: 18c818e0-3e4c-45b0-8156-5d61fbfd6296 3. 重新申请pvc绑定指定pv # 3.1 查看pv状态为available # 3.2 申请pvc # kubectl apply -f k8s-pvc2.yaml k8s-pvc2.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: system-minio # 原pvc name namespace: ai-education # 原pvc namespace spec: accessModes: - ReadWriteOnce # 原pv 读写模式 resources: requests: storage: 8Gi # 原pv 容量 volumeName: pvc-18c818e0-3e4c-45b0-8156-5d61fbfd6296 # 原pv name ","date":"2023-03-11","externalUrl":null,"permalink":"/volume-solve/pvc%E8%AF%AF%E5%88%A0%E9%99%A4%E5%90%8E%E6%81%A2%E5%A4%8D/","section":"云存储问题解决","summary":"\u003cblockquote\u003e\n\u003cp\u003e仅限PVC绑定其它未删除POD且自身处于terminating状态。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"PVC误删除后恢复操作","type":"Kubernetes"},{"content":"","date":"2023-03-11","externalUrl":null,"permalink":"/tags/volume/","section":"Tags","summary":"","title":"Volume","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2023-03-11","externalUrl":null,"permalink":"/volume-solve/","section":"云存储问题解决","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"云存储问题解决","type":"volume-solve"},{"content":"k8s网络问题解决记录\n1. k8s(1):calico网络问题排查，IP_AUTODETECTION_METHOD # 引用： https://zhuanlan.zhihu.com/p/488034895?utm_id=0\n问题描述： 4个节点的k8s集群，忽然有个节点上的pod无法访问其他节点的k8s域名了\n排查 ①查看coredns服务状态，发现正常，排除内部dns解析问题 ②查看发现异常pod节点对应的calico-node-rdw97服务异常，出现了非正常使用网卡信息 ③查看calico配置发现，网卡配置为P_AUTODETECTION_METHOD： first_found，这样很容易选错网卡 解决：查看并修改calico node的daemonset配置：(vim环境) kubectl edit DaemonSet calico-node -n calico-system\n发现: IP_AUTODETECTION_METHOD 这个环境变量\n的值是first_found，我的机器网上eth0并不是第一个，这样可能有问题。因此修改成 value: \u0026ldquo;interface=eth0\u0026rdquo; 并保存退出，居然没生效。\n原因是：\n该方法命令虽然可以执行，但是我这里ds么没有生效。k8s 1.22，通过operator生成的calico，不是calico.yaml，如果是calico.yaml，直接修改文件中的参数即可。（calico-node报错Readiness probe failed: calico/node is not ready: BIRD is not ready: Error querying BIRD: unable to connect to BIRDv4 socket - Wghdr\u0026rsquo;s Blog!）\n解决2： 因此要用另一种方法来修改：\n我的custom-resources.yaml 如下，加上红色部分：\ncustom-resources.yaml nodeAddressAutodetectionV4: interface: eno.* # This section includes base Calico installation configuration. # For more information, see: https://projectcalico.docs.tigera.io/v3.22/reference/installation/api#operator.tigera.io/v1.Installation apiVersion: operator.tigera.io/v1 kind: Installation metadata: name: default spec: # Configures Calico networking. registry: sea.hub:5000 calicoNetwork: # Note: The ipPools section cannot be modified post-install. ipPools: - blockSize: 26 cidr: 100.64.0.0/10 encapsulation: VXLANCrossSubnet natOutgoing: Enabled nodeSelector: all() nodeAddressAutodetectionV4: interface: eno.* --- # This section configures the Calico API server. # For more information, see: https://projectcalico.docs.tigera.io/v3.22/reference/installation/api#operator.tigera.io/v1.APIServer apiVersion: operator.tigera.io/v1 kind: APIServer metadata: name: default spec: {} 然后重新执行： kubectl apply -f custom-resources.yaml 然后再：\nkubectl set env ds/calico-node -n calico-system IP_AUTODETECTION_METHOD=interface=eno3 可能会出现的问题，calico-apiserver-5787fcd448-s56vz出现异常，并报ImageNameError,查找发现yaml中定义的ImageName不知为何少了一个/，添加后重启服务即可 ","date":"2023-02-11","externalUrl":null,"permalink":"/cloudnetissues/k8s%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/","section":"云原生网络知识集合","summary":"\u003cp\u003ek8s网络问题解决记录\u003c/p\u003e","title":"k8s网络问题解决记录","type":"cloudnet"},{"content":"","date":"2023-02-11","externalUrl":null,"permalink":"/tags/net/","section":"Tags","summary":"","title":"Net","type":"tags"},{"content":"","date":"2023-02-11","externalUrl":null,"permalink":"/tags/service/","section":"Tags","summary":"","title":"Service","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2023-02-11","externalUrl":null,"permalink":"/cloudnetissues/","section":"云原生网络知识集合","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"云原生网络知识集合","type":"cloudnetissues"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/command/","section":"Tags","summary":"","title":"Command","type":"tags"},{"content":"收集各类常见kubernetes命令。\n1. 取消主节点禁止调度污点 # ● 较旧版本\nkubectl taint node k3s01 node-role.kubernetes.io/master:NoSchedule- ● 较新版本：\nkubectl taint node k3s01 node-role.kubernetes.io/control-plane:NoSchedule- ","date":"2022-03-12","externalUrl":null,"permalink":"/kubernetes/kubernetes%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/","section":"Kubernetes","summary":"\u003cp\u003e收集各类常见kubernetes命令。\u003c/p\u003e","title":"Kubernetest命令集合","type":"Kubernetes"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/sh/","section":"Tags","summary":"","title":"Sh","type":"tags"},{"content":"","date":"2022-03-12","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/coding/","section":"Tags","summary":"","title":"Coding","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2022-03-11","externalUrl":null,"permalink":"/go/","section":"Go语言","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"Go语言","type":"go"},{"content":"实现k8s端口号定义及分配\n1. NodePort 范围 # 在 Kubernetes 集群中，NodePort 默认范围是 30000-32767\n2. 增大NodePort范围 # 修改kube-apiserver.yaml文件\n● 使用 kubeadm 安装 K8S 集群的情况下，您的 Master 节点上会有一个文件 /etc/kubernetes/manifests/kube-apiserver.yaml，修改此文件，向其中添加 \u0026ndash;service-node-port-range=20000-22767 （定义需要的端口范围），如下所示：\napiVersion: v1 kind: Pod ... ... ... ... - --service-account-key-file=/etc/kubernetes/pki/sa.pub - --service-node-port-range=20000-22767 - --service-cluster-ip-range=10.96.0.0/22 ... ... ... ... 3. 重启kube-apiserver # # 获得 apiserver 的 pod 名字 export apiserver_pods=$(kubectl get pods --selector=component=kube-apiserver -n kube-system --output=jsonpath={.items..metadata.name}) # 删除 apiserver 的 pod kubectl delete pod $apiserver_pods -n kube-system 4.验证结果 # ● 执行以下命令查看相关pod\nkubectl describe pod $apiserver_pods -n kube-system 注意:\n● 对于已经创建的NodePort类型的Service，需要删除重新创建\n● 如果集群有多个 Master 节点，需要逐个修改每个节点上的 /etc/kubernetes/manifests/kube-apiserver.yaml 文件，并重启 apiserver\n","date":"2022-03-11","externalUrl":null,"permalink":"/cloudnetissues/k8s%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%88%86%E9%85%8D/","section":"云原生网络知识集合","summary":"\u003cp\u003e实现k8s端口号定义及分配\u003c/p\u003e","title":"k8s端口号定义及分配","type":"cloudnet"},{"content":"实现k8s容器间免密访问方案\nPod 使用同样的私钥/公钥，可以互相免密访问 只需生成同样的 id_rsa和 id_rsa.pub，然后将 authorized_keys的内容设为id_rsa.pub一致。也即将相同的配置文件挂载到不同的Pod上即可\nconfig文件配置\n将 id_rsa,id_rsa.pub,authorized_keys,config作为 configmap的内容。 # 第一次访问时，无需确认，直接连接 StrictHostKeyChecking no UserKnownHostsFile /dev/null # pod 间无法通过 hostname 直接访问对方的，因此需要 service Host pod-hostname-1 HostName pod-hostname-1.service-name Host pod-hostname-2 HostName pod-hostname-2.service-name 1. Pod 主机名解析 # 1.1 pod 间无法通过 hostname 直接访问对方的，因此需要 service： # 可以参考 Pod 间通信； 1.1.1 启动带 Pod 间通信的 Job # 要在某 Job 中启用使用 Pod 主机名的 Pod 间通信，你必须执行以下操作：\n对于 Job 所创建的那些 Pod， 使用一个有效的标签选择算符创建无头服务。 该无头服务必须位于与该 Job 相同的名字空间内。 实现这一目的的一种简单的方式是使用 job-name: \u0026lt;任务名称\u0026gt; 作为选择算符， 因为 job-name 标签将由 Kubernetes 自动添加。 此配置将触发 DNS 系统为运行 Job 的 Pod 创建其主机名的记录。 通过将以下值包括到你的 Job 模板规约中，针对该 Job 的 Pod，将无头服务配置为其子域服务： subdomain: \u0026lt;无头服务的名称\u0026gt; 示例:以下是启用通过 Pod 主机名来完成 Pod 间通信的 Job 示例。 只有在使用主机名成功 ping 通所有 Pod 之后，此 Job 才会结束。\n说明： # 在以下示例中的每个 Pod 中执行的 Bash 脚本中，如果需要从名字空间外到达 Pod， Pod 主机名也可以带有该名字空间作为前缀。\napiVersion: v1 kind: Service metadata: name: headless-svc spec: clusterIP: None # clusterIP 必须为 None 以创建无头服务 selector: job-name: example-job # 必须与 Job 名称匹配 --- apiVersion: batch/v1 kind: Job metadata: name: example-job spec: completions: 3 parallelism: 3 completionMode: Indexed template: spec: subdomain: headless-svc # 必须与 Service 名称匹配 restartPolicy: Never containers: - name: example-workload image: bash:latest command: - bash - -c - | for i in 0 1 2 do gotStatus=\u0026#34;-1\u0026#34; wantStatus=\u0026#34;0\u0026#34; while [ $gotStatus -ne $wantStatus ] do ping -c 1 example-job-${i}.headless-svc \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 gotStatus=$? if [ $gotStatus -ne $wantStatus ]; then echo \u0026#34;Failed to ping pod example-job-${i}.headless-svc, retrying in 1 second...\u0026#34; sleep 1 fi done echo \u0026#34;Successfully pinged pod: example-job-${i}.headless-svc\u0026#34; done 应用上述示例之后，使用 \u0026lt;Pod 主机名\u0026gt;.\u0026lt;无头服务名\u0026gt; 通过网络到达彼此。 你应看到类似以下的输出：\nkubectl logs example-job-0-qws42 Failed to ping pod example-job-0.headless-svc, retrying in 1 second... Successfully pinged pod: example-job-0.headless-svc Successfully pinged pod: example-job-1.headless-svc Successfully pinged pod: example-job-2.headless-svc 说明：谨记此例中使用的 \u0026lt;Pod 主机名\u0026gt;.\u0026lt;无头服务名称\u0026gt; 名称格式不适用于设置为 None 或 Default 的 DNS 策略。 你可以在此处了解有关 Pod DNS 策略的更多信息。\n1.2 hostname 必须是规则化，才可以静态生成所有的主机名： # 可以用 Statefulset 或者 IndexJob 来生成有规则的 hostname。 1.3 Pod 挂载 SSH ConfigMap # 想要免密，则 Pod 上挂载相应的configmap 即可。\nspec: containers: volumeMounts: - name: ssh-config mountPath: /root/.ssh # use subpath to avoid soft link subPath: .ssh volumes: - name: ssh-config configMap: name: ssh-config-cm defaultMode: 0600 items: - key: PRIVATE_KEY path: .ssh/id_rsa - key: PUBLIC_KEY path: .ssh/id_rsa.pub - key: AUTHORIZED_KEYS path: .ssh/authorized_keys - key: CONFIG path: .ssh/config ","date":"2022-03-11","externalUrl":null,"permalink":"/cloudnetissues/k8s%E5%AE%B9%E5%99%A8%E9%97%B4%E5%85%8D%E5%AF%86%E8%AE%BF%E9%97%AE%E6%96%B9%E6%A1%88/","section":"云原生网络知识集合","summary":"\u003cp\u003e实现k8s容器间免密访问方案\u003c/p\u003e","title":"k8s容器间免密访问方案","type":"cloudnet"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/nossh/","section":"Tags","summary":"","title":"Nossh","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/port/","section":"Tags","summary":"","title":"Port","type":"tags"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"Ssh","type":"tags"},{"content":"本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\n标题 # 以下 HTML 元素 \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 表示六个级别的标题。 \u0026lt;h1\u0026gt; 是最高的标题级别，而 \u0026lt;h6\u0026gt; 是最低的。\nH1 # H2 # H3 # H4 # H5 # H6 # 段落 # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n块引用 # 块引用表示从其他来源引用的内容，可以用于位于 footer 或 cite 元素内的引文，并且可以表示一些补充说明（例如注释和缩写）。\n没有参考链接的块引用 # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n有参考链接的块引用 # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 # 表格不是核心 Markdown 规范的一部分，但 Hugo 支持渲染。\nName Age Bob 27 Alice 23 表格内内联 Markdown # Italics Bold Code italics bold code 代码块 # 带反引号的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 带有 Hugo 内部高亮简码的代码块 # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 # 有序列表 # First item Second item Third item 无序列表 # List item Another item And another item 嵌套列表 # Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr、sub、sup、kbd、mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n上述引文摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的谈论“什么都没有”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-03-11","externalUrl":null,"permalink":"/go/windows%E9%85%8D%E7%BD%AEgo%E7%8E%AF%E5%A2%83/","section":"Go语言","summary":"\u003cp\u003e本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\u003c/p\u003e","title":"Windows配置Go环境","type":"go"},{"content":"","date":"2022-03-11","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83/","section":"Tags","summary":"","title":"环境","type":"tags"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"Css","type":"tags"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"Html","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2019-03-11","externalUrl":null,"permalink":"/k8s-solve/","section":"k8s问题解决与记录","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"k8s问题解决与记录","type":"k8s-solve"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown","type":"tags"},{"content":"本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\n标题 # 以下 HTML 元素 \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 表示六个级别的标题。 \u0026lt;h1\u0026gt; 是最高的标题级别，而 \u0026lt;h6\u0026gt; 是最低的。\nH1 # H2 # H3 # H4 # H5 # H6 # 段落 # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n块引用 # 块引用表示从其他来源引用的内容，可以用于位于 footer 或 cite 元素内的引文，并且可以表示一些补充说明（例如注释和缩写）。\n没有参考链接的块引用 # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n有参考链接的块引用 # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 # 表格不是核心 Markdown 规范的一部分，但 Hugo 支持渲染。\nName Age Bob 27 Alice 23 表格内内联 Markdown # Italics Bold Code italics bold code 代码块 # 带反引号的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 带有 Hugo 内部高亮简码的代码块 # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 # 有序列表 # First item Second item Third item 无序列表 # List item Another item And another item 嵌套列表 # Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr、sub、sup、kbd、mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n上述引文摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的谈论“什么都没有”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11","externalUrl":null,"permalink":"/k8s-solve/%E9%83%A8%E7%BD%B2/","section":"k8s问题解决与记录","summary":"\u003cp\u003e本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\u003c/p\u003e","title":"部署问题解决记录","type":"sample"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/tags/%E7%A4%BA%E4%BE%8B/","section":"Tags","summary":"","title":"示例","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/code-languages/","section":"编程语言","summary":"","title":"编程语言","type":"code-languages"},{"content":"","externalUrl":null,"permalink":"/series/%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/skill-tech/","section":"奇淫技巧","summary":"","title":"奇淫技巧","type":"skill-tech"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%96%87%E6%A1%A3/","section":"Tags","summary":"","title":"文档","type":"tags"},{"content":"","externalUrl":null,"permalink":"/cloudnative/","section":"文档","summary":"","title":"文档","type":"cloudnative"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%96%B0%E6%89%8B/","section":"Tags","summary":"","title":"新手","type":"tags"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","externalUrl":null,"permalink":"/cloudstorage/","section":"云原生存储","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"云原生存储","type":"cloudstorage"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","externalUrl":null,"permalink":"/cloudnet/","section":"云原生网络","summary":"Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blow","title":"云原生网络","type":"cloudnet"}]