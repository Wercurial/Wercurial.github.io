<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白小白 的 Cat</title>
  
  <subtitle>人间有味是清欢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://5jp.top/"/>
  <updated>2019-05-12T04:01:20.996Z</updated>
  <id>http://5jp.top/</id>
  
  <author>
    <name>Mercurial</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-Next博客主题优化</title>
    <link href="http://5jp.top/Hexo-Next%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html"/>
    <id>http://5jp.top/Hexo-Next博客主题优化.html</id>
    <published>2019-05-10T07:24:54.000Z</published>
    <updated>2019-05-12T04:01:20.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Next博客主题优化"><a href="#Next博客主题优化" class="headerlink" title="Next博客主题优化"></a>Next博客主题优化</h2><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>说实话,写到这里的时候,我的内心是崩溃的ε=(´ο｀*)))唉(因为就在一个小时以前,我刚刚把这篇博文写的差不多了,想着叉掉,下次再写,蓝鹅叉掉以后,内容就不见了,也不知道是忘记保存了,还是咋的了,咱也不敢问)</p><p>自从搞了hexo博客以后,在博客优化上面是越走越远,怕走的太远,忘记了回头的路,遂写此博文,优化手段基本百度,少许加了自己的思路,有更有趣思路的盆友可以一起交流ヾ(❀^ω^)ﾉﾞ</p><h4 id="二、关于本地图片上传网页后突然不显示问题"><a href="#二、关于本地图片上传网页后突然不显示问题" class="headerlink" title="二、关于本地图片上传网页后突然不显示问题"></a>二、关于本地图片上传网页后突然不显示问题</h4><p>(1)首先我的图片上传基于npm install hexo-asset-image –save(具体实现请君自行百度)</p><p>(2)本来嘛,写好博文,上传,按部就班,图片显示都是没毛病滴,忽然有一天,想着搞个seo优化,让咱博客也能被搜索引擎搜到,遂搞之,蓝鹅优化后(Ps:后分析,主要问题出现在url优化上),图片就挂掉了,显示不出来,百度许久,发现可能是图片路径变了,又在本地查找,发现图片路径应该使用渲染后的图片路径,而不是本地md文件的路径</p><p>(3)改后改前效果对比:</p><p><img src="/Hexo-Next博客主题优化\1.jpg" alt></p><p>渲染后图片路径展示:</p><p><img src="/Hexo-Next博客主题优化\2.jpg" alt></p><p>改后.md文件插入图片展示:</p><p><img src="/Hexo-Next博客主题优化\3.jpg" alt></p><p>改后,博客上传网页显示,没问题,但是本地编写.md文件时,不能实时显示图片了,暂时没有更好的解决思路,以上</p><h4 id="三、博客顶部随机语句实现-调用木芽一言api"><a href="#三、博客顶部随机语句实现-调用木芽一言api" class="headerlink" title="三、博客顶部随机语句实现(调用木芽一言api)"></a>三、博客顶部随机语句实现(调用木芽一言api)</h4><p>(1)效果展示:</p><p><img src="/Hexo-Next博客主题优化\4.jpg" alt></p><p>(2)实现思路:</p><p>​    添加路径及对应js代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://api.xygeng.cn/dailywd/api/getjs.php"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/Hexo-Next博客主题优化\5.jpg" alt></p><p><img src="/Hexo-Next博客主题优化\6.jpg" alt></p><p>木芽一言还是有很多好句子滴~~</p><h4 id="四、侧边栏访客IP-时间-浏览器内核显示"><a href="#四、侧边栏访客IP-时间-浏览器内核显示" class="headerlink" title="四、侧边栏访客IP/时间/浏览器内核显示"></a>四、侧边栏访客IP/时间/浏览器内核显示</h4><p>(1)效果展示:</p><p><img src="/Hexo-Next博客主题优化\7.jpg" alt></p><p>(2)实现思路:</p><p>​    添加路径及对应js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img height=<span class="string">"100"</span> src=<span class="string">"http://tool.lu/netcard/"</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/Hexo-Next博客主题优化\8.jpg" alt></p><p><img src="/Hexo-Next博客主题优化\9.jpg" alt></p><p>以上~~</p><h4 id="五、侧边栏访客地址以3DEarth的形式展现"><a href="#五、侧边栏访客地址以3DEarth的形式展现" class="headerlink" title="五、侧边栏访客地址以3DEarth的形式展现"></a>五、侧边栏访客地址以3DEarth的形式展现</h4><h4 id="六、增加上传及下载PDF文件功能"><a href="#六、增加上传及下载PDF文件功能" class="headerlink" title="六、增加上传及下载PDF文件功能"></a>六、增加上传及下载PDF文件功能</h4><p>1)今天看博客的时候,突发奇想hexo博客能不能在线浏览一些特殊格式的文档呢,遂百度了一番,发现有pdf文档在线预览,上传及下载的功能,至于其他格式的暂时没有发现,此处留白</p><p>2)要实现pdf文档的上传,在线预览,及下载,首先要安装hexo-pdf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure><p>3)在md文件添加代码及在md文件所在路径下的同名文件夹中添加文件(此处介绍本地文件上传到你的在线博客)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部链接：</span><br><span class="line">&#123;% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span><br><span class="line">本地连接：</span><br><span class="line">&#123;% pdf ./文件名.pdf %&#125;</span><br></pre></td></tr></table></figure><p>4)情况说明,本人使用本地连接调试许久,始终不能成功加载pdf文件,联想到本篇博文第一章图片问题,遂采用如下的网址调用方式,但是还是需在本地上传文件才行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%  pdf  http://yoursite/md文件同名文件夹名称/pdf名称.pdf  %&#125;</span><br></pre></td></tr></table></figure><p>5)效果展示:</p><p><img src="/Hexo-Next博客主题优化\10.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Next博客主题优化&quot;&gt;&lt;a href=&quot;#Next博客主题优化&quot; class=&quot;headerlink&quot; title=&quot;Next博客主题优化&quot;&gt;&lt;/a&gt;Next博客主题优化&lt;/h2&gt;&lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Blog" scheme="http://5jp.top/categories/Blog/"/>
    
    
      <category term="HEXO" scheme="http://5jp.top/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+github搭建个人博客</title>
    <link href="http://5jp.top/HEXO-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://5jp.top/HEXO-github搭建个人博客.html</id>
    <published>2019-05-07T07:34:20.000Z</published>
    <updated>2019-05-10T07:29:19.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HEXO-Github-Next主题-个人博客网站"><a href="#HEXO-Github-Next主题-个人博客网站" class="headerlink" title="HEXO+Github+Next主题 = 个人博客网站"></a>HEXO+Github+Next主题 = 个人博客网站</h2><h4 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h4><h5 id="1-Github账号注册-有则跳过-—-https-github-com-join"><a href="#1-Github账号注册-有则跳过-—-https-github-com-join" class="headerlink" title="1.Github账号注册(有则跳过)—[https://github.com/join]:"></a>1.Github账号注册(有则跳过)—[<a href="https://github.com/join" target="_blank" rel="noopener">https://github.com/join</a>]:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 GitHub。</span><br><span class="line">GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过 350 万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</span><br></pre></td></tr></table></figure><p><img src="/HEXO-github搭建个人博客\github.jpg" alt></p><h5 id="２．配置环境"><a href="#２．配置环境" class="headerlink" title="２．配置环境"></a>２．配置环境</h5><p>①本人电脑： windows 10 专业版，64 位</p><p>②安装 Node.js 和配置好 Node.js 环境，打开 cmd 命令行，成功界面如下<img src="/HEXO-github搭建个人博客\node.jpg" alt></p><p>③安装 Git 和配置好 Git 环境，安装成功的象征就是在电脑上任何位置<strong>鼠标右键</strong>能够出现如下两个选择<img src="/HEXO-github搭建个人博客\git.png" alt></p><h5 id="3-创建域名对应仓库"><a href="#3-创建域名对应仓库" class="headerlink" title="3.创建域名对应仓库"></a>3.创建域名对应仓库</h5><p>登录你的github账号,新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的 github 用户名是 test，那么你就新建<code>username.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是<code>username.github.io</code> 了，是不是很方便？</p><p>由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">2.仓库名字必须是：username.github.io，其中username是你的用户名；</span><br><span class="line">3.仓库创建成功不会立即生效，需要过一段时间，大概 10-30 分钟(以后更新博文时亦会有延迟,毕竟是国外服务器)；</span><br></pre></td></tr></table></figure><h5 id="4-配置本机电脑与github关联"><a href="#4-配置本机电脑与github关联" class="headerlink" title="4.配置本机电脑与github关联"></a>4.配置本机电脑与github关联</h5><p>具体参考[<a href="https://blog.csdn.net/wqetfg/article/details/50810362" target="_blank" rel="noopener">https://blog.csdn.net/wqetfg/article/details/50810362</a>]:</p><h4 id="二、HEXO安装及博客搭建"><a href="#二、HEXO安装及博客搭建" class="headerlink" title="二、HEXO安装及博客搭建"></a>二、HEXO安装及博客搭建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hexo 是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持 Markdown 格式，有众多优秀插件和主题。</span><br><span class="line">官网： http://hexo.io</span><br><span class="line">github: https://github.com/hexojs/hexo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure><h1 id="未完待续-for-test"><a href="#未完待续-for-test" class="headerlink" title="未完待续~~ for test"></a>未完待续~~ for test</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HEXO-Github-Next主题-个人博客网站&quot;&gt;&lt;a href=&quot;#HEXO-Github-Next主题-个人博客网站&quot; class=&quot;headerlink&quot; title=&quot;HEXO+Github+Next主题 = 个人博客网站&quot;&gt;&lt;/a&gt;HEXO+Gith
      
    
    </summary>
    
      <category term="Blog" scheme="http://5jp.top/categories/Blog/"/>
    
    
      <category term="HEXO" scheme="http://5jp.top/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习心得</title>
    <link href="http://5jp.top/Docker%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97.html"/>
    <id>http://5jp.top/Docker学习心得.html</id>
    <published>2019-04-08T09:14:35.000Z</published>
    <updated>2019-05-10T07:27:41.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h4 id="一、Docker与OpenStack对比"><a href="#一、Docker与OpenStack对比" class="headerlink" title="一、Docker与OpenStack对比"></a>一、Docker与OpenStack对比</h4><p><img src="/Docker学习心得\Docker与OpenStack对比.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h2&gt;&lt;h4 id=&quot;一、Docker与OpenStack对比&quot;&gt;&lt;a href=&quot;#一、Docker与OpenStac
      
    
    </summary>
    
      <category term="Docker" scheme="http://5jp.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://5jp.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>终端天下之Linux命令</title>
    <link href="http://5jp.top/%E7%BB%88%E7%AB%AF%E5%A4%A9%E4%B8%8B%E4%B9%8BLinux.html"/>
    <id>http://5jp.top/终端天下之Linux.html</id>
    <published>2019-03-25T02:43:23.000Z</published>
    <updated>2019-03-29T14:25:35.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）"><a href="#linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）" class="headerlink" title="linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）"></a>linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux相对于Windows来说，最独特的魅力大概就在于，一手终端行天下了吧，所以就在网上搜集了各式各样的终端命令，从此开启一场咩有硝烟的江湖之路～</span><br></pre></td></tr></table></figure><h4 id="一、文件及目录操作"><a href="#一、文件及目录操作" class="headerlink" title="一、文件及目录操作"></a>一、文件及目录操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cd /home  切换到‘/home’目录下</span><br><span class="line">cd ..  返回到当前目录的上一级目录</span><br><span class="line">cd ../..  返回到当前目录的上两级目录</span><br><span class="line">cd  切换到当前用户的主目录</span><br><span class="line">cd ~&quot;用户名“  切换到指定用户名主目录</span><br><span class="line">cd -  切换到上次所在目录</span><br><span class="line">pwd  显示当前工作路径</span><br><span class="line">ls  查看当前目录中的文件</span><br><span class="line">ls -a  查看当前目录中的文件（包含隐藏文件.或..）</span><br><span class="line">ls -al  同上条指令（+：以列表形式显示文件和目录的详细资料)</span><br><span class="line">ls -alh  同上条指令(+: 将文件大小以更直观的形式展示出来)</span><br><span class="line">ls *[0-9]*  将名称中包含数字的文件或目录展示出来</span><br><span class="line">tree 显示文件和目录由根目录开始的树形结构（deepin系统需sudo apt-get install tree安装tree命令)</span><br><span class="line">mkdir xxx  创建一个名为xxx的目录</span><br><span class="line">mkdir xx1 xx2  同时创建两个目录</span><br><span class="line">mkdir -p xx/xx1/xx2  在当前目录下创建一个目录树</span><br><span class="line">rm -f file1  删除一个叫做 &apos;file1&apos; 的文件&apos; </span><br><span class="line">rm -r dir1  删除一个叫做 &apos;dir1&apos; 的目录&apos; (或rmdir dir1)</span><br><span class="line">rm -rf dir1  删除一个叫做 &apos;dir1&apos; 的目录并同时删除其内容 </span><br><span class="line">rm -rf dir1 dir2  同时删除两个目录及它们的内容 </span><br><span class="line">mv dir1 new_dir  重命名/移动 一个目录 </span><br><span class="line">cp file1 file2  复制一个文件 </span><br><span class="line">cp dir/* .  复制一个目录下的所有文件到当前工作目录 </span><br><span class="line">cp -a /tmp/dir1 .  复制一个目录到当前工作目录 </span><br><span class="line">cp -a dir1 dir2  复制一个目录 </span><br><span class="line">ln -s file1 lnk1  创建一个指向文件或目录的软链接 </span><br><span class="line">ln file1 lnk1  创建一个指向文件或目录的物理链接 </span><br><span class="line">touch -t 0712250000 file1  修改一个文件或目录的时间戳 - (YYMMDDhhmm) </span><br><span class="line">file file1 outputs the mime type of the file as text </span><br><span class="line">iconv -l  列出已知的编码</span><br></pre></td></tr></table></figure><h4 id="二、文件的搜索"><a href="#二、文件的搜索" class="headerlink" title="二、文件的搜索"></a>二、文件的搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find / -name file1  从 &apos;/&apos; 开始进入根文件系统搜索文件和目录 </span><br><span class="line">find / -user user1  搜索属于用户 &apos;user1&apos; 的文件和目录 </span><br><span class="line">find /home/user1 -name \*.bin  在目录 &apos;/ home/user1&apos; 中搜索带有&apos;.bin&apos; 结尾的文件 </span><br><span class="line">find /usr/bin -type f -atime +100  索在过去100天内未被使用过的执行文件 </span><br><span class="line">find /usr/bin -type f -mtime -10  搜索在10天内被创建或者修改过的文件 </span><br><span class="line">find / -name \*.rpm -exec chmod 755 &apos;&#123;&#125;&apos; \;  搜索以 &apos;.rpm&apos; 结尾的文件并定义其权限 </span><br><span class="line">find / -xdev -name \*.rpm  搜索以 &apos;.rpm&apos; 结尾的文件，忽略光驱、捷盘等可移动设备 </span><br><span class="line">locate \*.ps  寻找以 &apos;.ps&apos; 结尾的文件 - 先运行 &apos;updatedb&apos; 命令 </span><br><span class="line">whereis halt  显示一个二进制文件、源码或man的位置 </span><br><span class="line">which halt  显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure><h1 id="未完待续呢～"><a href="#未完待续呢～" class="headerlink" title="未完待续呢～"></a>未完待续呢～</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）&quot;&gt;&lt;a href=&quot;#linux基本命令收录（本文指令均在基于Linux的Deepin系统下验证收集）&quot; class=&quot;headerlink&quot; title=&quot;linux基本命令收录（
      
    
    </summary>
    
      <category term="Linux" scheme="http://5jp.top/categories/Linux/"/>
    
    
      <category term="Linux命令" scheme="http://5jp.top/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>python技术点</title>
    <link href="http://5jp.top/python%E6%8A%80%E6%9C%AF%E7%82%B9.html"/>
    <id>http://5jp.top/python技术点.html</id>
    <published>2019-03-20T13:43:56.000Z</published>
    <updated>2019-05-10T07:28:30.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本篇博文并无特定知识点，仅用作记录工作学习中遇到的问题，知识积累,回顾(主要为Python技术点,附带其他知识些许)</span><br></pre></td></tr></table></figure><h4 id="一、装饰器"><a href="#一、装饰器" class="headerlink" title="一、装饰器"></a>一、装饰器</h4><p>装饰器的作用就是在不改变原有函数代码结构，功能的前提下增加新的功能。主要用途有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">①缓存</span><br><span class="line">②重试</span><br><span class="line">③兼容旧版参数</span><br></pre></td></tr></table></figure><h4 id="二、Pycharm新建文件时文件第一行自动加上导入utf-8语句"><a href="#二、Pycharm新建文件时文件第一行自动加上导入utf-8语句" class="headerlink" title="二、Pycharm新建文件时文件第一行自动加上导入utf-8语句"></a>二、Pycharm新建文件时文件第一行自动加上导入utf-8语句</h4><p>按图示设置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># *_*coding:utf-8 *_*</span><br></pre></td></tr></table></figure><p><img src="/python技术点\pycharm.jpg" alt></p><h4 id="三、Python-性能提升小技巧"><a href="#三、Python-性能提升小技巧" class="headerlink" title="三、Python 性能提升小技巧"></a>三、<a href="https://www.cnblogs.com/taceywong/p/5773220.html" target="_blank" rel="noopener">Python 性能提升小技巧</a></h4><p>python性能提升小技巧可参考该博文<a href="https://www.cnblogs.com/taceywong/p/5773220.html" target="_blank" rel="noopener">https://www.cnblogs.com/taceywong/p/5773220.html</a></p><h4 id="四、Pandas之Dateframe-实现Excel读取与写入"><a href="#四、Pandas之Dateframe-实现Excel读取与写入" class="headerlink" title="四、Pandas之Dateframe 实现Excel读取与写入"></a>四、Pandas之Dateframe 实现Excel读取与写入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目的：该模块可以实现将导出至Excel，方便数据的直观显现；或数据从Excel导入到程序中，方便操作</span><br></pre></td></tr></table></figure><p>1、从Excel读取（ 需安装xlrd库）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">pd.read_excel(&quot;test.xlsx&quot;,&apos;sheet1&apos;)  # 该文件路径为当前py程序路径</span><br></pre></td></tr></table></figure><p>2、导出Excel文件（需安装openpyxl库- pip install openpyxl）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df.to_excel(&apos;test.xlsx&apos;,index=False)</span><br><span class="line"> *index：是否隐藏索引，df为二维数据</span><br></pre></td></tr></table></figure><p> <strong>注意</strong>:使用pandas_DateFrame数据为二维数组</p><h4 id="五、Pandas-的行列名更改与数据选择"><a href="#五、Pandas-的行列名更改与数据选择" class="headerlink" title="五、Pandas 的行列名更改与数据选择"></a>五、Pandas 的行列名更改与数据选择</h4><h4 id="六、-urllib-request-urlretrieve-用于下载链接-URL-的内容到本地-filepath-里面"><a href="#六、-urllib-request-urlretrieve-用于下载链接-URL-的内容到本地-filepath-里面" class="headerlink" title="六、 urllib.request.urlretrieve 用于下载链接 URL 的内容到本地 filepath 里面"></a>六、 urllib.request.urlretrieve 用于下载链接 URL 的内容到本地 filepath 里面</h4><h4 id="七、Pycharm插件之statistic"><a href="#七、Pycharm插件之statistic" class="headerlink" title="七、Pycharm插件之statistic"></a>七、Pycharm插件之statistic</h4><p>Pycharm可以安装插件statistic,用于统计代码行数,总数等详细信息,具体见下图</p><p><img src="/python技术点/1.jpg" alt></p><p><img src="/python技术点/2.jpg" alt></p><p><img src="/python技术点/3.jpg" alt></p><h4 id="八、一个学习Python挺不错的网站"><a href="#八、一个学习Python挺不错的网站" class="headerlink" title="八、一个学习Python挺不错的网站"></a>八、一个学习Python挺不错的网站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://code.ziqiangxuetang.com/django/django-cms-develop2.html</span><br></pre></td></tr></table></figure><h4 id="九、Python字符串常见操作"><a href="#九、Python字符串常见操作" class="headerlink" title="九、Python字符串常见操作"></a>九、Python字符串常见操作</h4><p>一、字符串操作六利器：拆分，修剪，拼接，检测，计数 ，替代</p><p>1.拆分 split，  str.split(“,”)；</p><p>2.修剪 strip, rstrip, lstrip</p><p>str.strip() , 用于修剪空白符（包括换行符）；</p><p>3.拼接 join “：”.join(), 方法传入一个列表或元组；</p><p>4.检测 in, index, find,rfind</p><p>in “a” in “abc” 返回结果为bool类型；</p><p>index ‘abc’.index(‘a’) 返回子串第一个字符所在的位置，找不到会报错；</p><p>find  ‘abc’.find(‘a’)找第一个子串的第一个字符位置，找不到结果为-1；</p><p>rfind ‘abc’.rfind(‘a’)找到最后一个子串的第一个字符的位置，找不到结果为-1</p><p>5.计数 count ‘abc’.count(‘a’) 结果为1；</p><ol start="6"><li>替代 replace ‘abc’.replace(‘a’,’d’)：</li></ol><p>其他：endwith, startwith如果某个字符串以某个后缀结果（以某个前缀开头），则返回TRUE;</p><p>lower,upper 将字母字符转化大小写；</p><p>ljust,rjust 用空格（或其他字符）填充字符长的空白则已返回复合最低宽度的字符串；</p><hr><p>作者：Dream星辰大海<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_28368327/article/details/79090595" target="_blank" rel="noopener">https://blog.csdn.net/qq_28368327/article/details/79090595</a> </p><h4 id="十、Django中间件"><a href="#十、Django中间件" class="headerlink" title="十、Django中间件"></a>十、Django中间件</h4><p><a href="http://www.cnblogs.com/zhaof/p/6281541.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhaof/p/6281541.html</a></p><h4 id="十一、Django-admin之django-simpleui"><a href="#十一、Django-admin之django-simpleui" class="headerlink" title="十一、Django-admin之django-simpleui"></a>十一、Django-admin之django-simpleui</h4><h4 id="简介：该款Python库为django—admin优化的库，私以为还是挺好用的"><a href="#简介：该款Python库为django—admin优化的库，私以为还是挺好用的" class="headerlink" title="简介：该款Python库为django—admin优化的库，私以为还是挺好用的"></a>简介：该款Python库为django—admin优化的库，私以为还是挺好用的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-simpleui</span><br></pre></td></tr></table></figure><h6 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h6><p></p><p align="center"><br><a href="https://newpanjing.github.io/simpleui/" target="_blank" rel="noopener"><br>   <img alt="Simpleui" src="https://github.com/newpanjing/simpleui/raw/2.0/images/simpleui-logo.png" width="140"><br></a><br></p><p></p><p></p><p align="center">让Django Admin简单而友好</p><p></p><p></p><p align="center"><br>Simple and friendly.<br>Django admin theme the simpleui<br></p><p></p><p></p><p align="center"><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg"></a><br> <a href="https://github.com/newpanjing/simpleui" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/developing%20with-Simpleui-2077ff.svg"></a><br> <a href="https://pypi.org/project/django-simpleui/#history" target="_blank" rel="noopener"><img src="https://img.shields.io/pypi/v/django-simpleui.svg"></a><br><a href="https://python.org" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/python->=3.7.x-green.svg"></a></p><h2 id><a href="#" class="headerlink" title></a><p></p></h2><p><a href="https://www.88cto.com/admin/" target="_blank" rel="noopener"><br><img alt="demo" src="https://raw.githubusercontent.com/newpanjing/simpleui/2.0/images/main.png" width="420" align="right" style="max-width: 50%"><br></a></p><h6 id="simpleui"><a href="#simpleui" class="headerlink" title="simpleui"></a>simpleui</h6><p>👍 内置15个流行的主题</p><p>✨ 官方与社区共同维护；持续更新，满足日常开发之所需。</p><p>⚡️ 多标签页面，各个模块更加清晰明了。配以最流行的后台设计风格，让Django Admin更加强大。</p><p>🎯 配置简单，极速上手，在settings.py中加入simpleui后启动立即生效，效率提升 100%！让后端开发得心应手。</p><p>☕️ Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。</p><p>🎨 Django Admin默认界面设计语言存在着的一些不足，比如色彩单一，大量线条的使用，分割化明显。将这些不足归类一下就是界面单调、雷同性明显、缺少惊喜。我们认为新的平台类视觉风格可以打破这些束缚，尝试一些新的探索，启发传统的设计认知,因此结合当下设计趋势，构思了Element+Django Admin的Simpleui。让Django Admin和Element产生完美的交互。</p><h6 id="simpleui-是什么？"><a href="#simpleui-是什么？" class="headerlink" title="simpleui 是什么？"></a>simpleui 是什么？</h6><p>🚀simpleui 是django admin的一个主题 是一个基于element-ui+vue开发，重写和优化90%以上的页面。<br>与suit是同类产品。我们是一个更符合国人审美和使用习惯的一个主题。</p><h6 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h6><p>详细步骤请浏览 <a href="./QUICK.md">快速上手指南</a>。 </p><ul><li>安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-simpleui</span><br></pre></td></tr></table></figure></li></ul><p>用pip或者<a href="#克隆源码本地安装">源码方式</a>安装simpleui后，在自己项目的settings.py文件中INSTALLED_APPS的第一行加入<code>simpleui</code></p><p>举个例子🌰：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line"><span class="string">'simpleui'</span>,</span><br><span class="line"><span class="string">'django.contrib.admin'</span>,</span><br><span class="line"><span class="string">'django.contrib.auth'</span>,</span><br><span class="line"><span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line"><span class="string">'django.contrib.sessions'</span>,</span><br><span class="line"><span class="string">'django.contrib.messages'</span>,</span><br><span class="line"><span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h6 id="升级simpleui"><a href="#升级simpleui" class="headerlink" title="升级simpleui"></a>升级simpleui</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-simpleui --upgrade</span><br></pre></td></tr></table></figure><h6 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h6><ol><li><p>如果关闭debug模式后，请执行以下命令将simpleui静态文件静态文件克隆到根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure></li><li><p>克隆静态文件出错<br>请在settings.py文件中加入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, "static")</span><br></pre></td></tr></table></figure></li><li><p>其他问题请参考<a href="https://docs.djangoproject.com/zh-hans/2.2/" target="_blank" rel="noopener">django官方文档</a>。</p></li><li><p>i18n 国际化 采用js国际化，默认为英文和中文两种语言，随系统切换。具体请看<a href="/i18n.md">国际化配置</a></p></li></ol><h4 id="十二、Windows下Nginx下载解压后启动无响应问题"><a href="#十二、Windows下Nginx下载解压后启动无响应问题" class="headerlink" title="十二、Windows下Nginx下载解压后启动无响应问题"></a>十二、Windows下Nginx下载解压后启动无响应问题</h4><p>在 Windows 下解压 Nginx 后，点击 ngin.exe 后一闪而过。然后在浏览器输入 localhost，始终无法看到 nginx 的界面。到网上去搜索问题，有人提到可能 80 端口被占用，要修改端口。打开 nginx.conf 后修改端口为 8888，再去访问，还是看不到 nginx 的界面。<br>按照网上的教程，解压安装应该没问题。我打开任务管理器，发现没有 nginx 的进程。这就纳闷了，明明点击了 nginx.exe。查看Nginx解压文件中的logs，发现是文件路径出现了问题：<br>到网上查阅资料，原来是 nginx 解压安装的路径有中文，折腾了一个多小时，原来是这个缘故。将 nginx 重新解压到一个没有中文的路径下就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="Python" scheme="http://5jp.top/categories/Python/"/>
    
    
      <category term="study for python" scheme="http://5jp.top/tags/study-for-python/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法（Python篇)</title>
    <link href="http://5jp.top/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88Python%E7%AF%87).html"/>
    <id>http://5jp.top/数据结构与算法（Python篇).html</id>
    <published>2019-03-19T14:30:09.000Z</published>
    <updated>2019-03-26T14:04:12.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本书基于作者用Python作为工作语言讨论数据结构和算法的基本问题，其撰写主要有以下几方面考虑：</p><p>①结合数据结构和算法，讨论Python中重要数据类型的实现情况和性质，帮助读者理解Python语言程序，理解如何写出高效的Python程序</p><p>②展示Python的面向对象技术可以怎样运用。书中构造了一批相互关联的数据结构 类，前面定义的类被反复应用在后续章节的数据结构和算法中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于上述情况，本书不但可以作为数据结构课程的教材，也可以作为学习Python语言编程技术的后续读物（假设读者已经有了Python编程的基本知识）</span><br></pre></td></tr></table></figure><h4 id="第1章：绪论"><a href="#第1章：绪论" class="headerlink" title="第1章：绪论"></a>第1章：绪论</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作为基于Python语言的“数据结构与算法”教程，本章首先讨论一些与数据结构和算法有关的基础问题，还将特别关注Python语言的一些相关情况。</span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~"></a>未完待续~</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据结构与算法&quot;&gt;&lt;a href=&quot;#数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法&quot;&gt;&lt;/a&gt;数据结构与算法&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="Python" scheme="http://5jp.top/categories/Python/"/>
    
    
      <category term="study for 算法" scheme="http://5jp.top/tags/study-for-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python手册-学习心得</title>
    <link href="http://5jp.top/python%E6%89%8B%E5%86%8C-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97.html"/>
    <id>http://5jp.top/python手册-学习心得.html</id>
    <published>2019-03-14T01:54:49.000Z</published>
    <updated>2019-04-04T13:25:12.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：python简介"><a href="#前言：python简介" class="headerlink" title="前言：python简介"></a>前言：python简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python是一种简单的、解释型的、交互式的、可移植的、面向对象的超高级语言。Python作为一种功能强大且通用的编程语言而广受好评，它具有非常清晰的语法特点，适用于多种操作系统(如windows,Linux,Unix)。</span><br></pre></td></tr></table></figure><p>​    Python有一个交互式的开发环境。因为Python是解释运行的，也是说Python在代码的同时就可以进行运行，从而大大节省了类似java的编译时间。另外Python语法简单，且内置了多种高级数据结构，如字典、列表等，所以使用起来就特别简单。</p><p>​    Python具有大部分面向对象语言的特征，可完全进行面向对象编程。Python具有简单易用，可移植性强的特点，颇受众多程序员们的喜爱。它可以在MS-DOS、WIndows、WIndows NT、Linux等多种操作系统上运行。（PS：在Python学习手册这本书出版时也即2009年，Python在TIOBE开发语言排行榜上名列第七，如今2019年3月份，Python已然杀到排行榜第三的位置，且逐渐逼近老二Java）</p><p>​    本书只是作为Python的入门级书籍，将本书学完以后，可以继续学习轻量级书籍《Programming Python》或者《Python Pocket Reference》，那本书提供了更强大并且更完整的例子，还有应用程序编程技巧的教程。</p><h2 id="第一章-问答环节"><a href="#第一章-问答环节" class="headerlink" title="第一章:问答环节"></a>第一章:问答环节</h2><h4 id="（一）人们为何使用Python"><a href="#（一）人们为何使用Python" class="headerlink" title="（一）人们为何使用Python"></a>（一）人们为何使用Python</h4><p><strong>①软件质量</strong>：在很大程度上，Python更注重可读性、一致性和软件质量，从而与脚本语言世界中的其他工具区别开来。Python代码的设计致力于可读性，因此具备更优秀的可重用性和可维护性。此外，Python支持软件开发的高级重用机制。例如面向对象程序设计（OOP，object-oriented programming）。</p><p><strong>②提高开发者效率</strong>：首先要声明的是Python属于解释型语言，相对于C、C++和Java等编译/静态类型语言，Python的开发者效率提高了数倍。Python代码的大小往往也只有C++或Java的1/5~1/3。这就意味者开发时，Python代码就相对较少，维护时就更不用说了。并且Python这种解释型语言的特性是开发时就可以立即运行的，进一步提高了程序员的开发效率。</p><p><strong>③程序的可移植性</strong>：绝大多数的Python的程序不做任何改变即可在所有主流计算机平台上运行。例如，在Linux和WIndows之间移植Python代码，只需简单地在机器间复制代码即可立即运行。</p><p><strong>④标准库的支持</strong>：Python内置了众多预编译并可移植的功能模块，这些功能模块叫做标准库（standard library）。标准库支持一系列应用级的编程任务。Python的第三方支持工具包括网站开发、数值计算、串口读写、游戏开发等各个方面。</p><p><strong>⑤组件集成</strong>：Python脚本可通过灵活的集成机制轻松地与应用程序的其他部分进行通信。这种集成使得Python成为产品定制和扩展的工具。Python绝不仅仅是一个独立的工具。</p><p><strong>⑥享受乐趣</strong>：Python的易用性和强大内置工具使编程成为一种乐趣而不是琐碎的重复劳动。</p><h4 id="（二）Python的缺点"><a href="#（二）Python的缺点" class="headerlink" title="（二）Python的缺点"></a>（二）Python的缺点</h4><p>与编译语言相比较，Python的执行速度还不够快。</p><h4 id="（三）使用Python可以做些什么"><a href="#（三）使用Python可以做些什么" class="headerlink" title="（三）使用Python可以做些什么"></a>（三）使用Python可以做些什么</h4><p>①系统编程</p><p>②用户图形接口</p><p>③Internet脚本</p><p>④组件集成</p><p>⑤数据库编程</p><p>⑥快速原型</p><p>⑦数值计算和科学计算编程</p><p>⑧游戏、图像、人工智能、XML、机器人等</p><h4 id="（四）Python有哪些技术上的优点"><a href="#（四）Python有哪些技术上的优点" class="headerlink" title="（四）Python有哪些技术上的优点"></a>（四）Python有哪些技术上的优点</h4><p>①面向对象</p><p>②免费</p><p>③可移植</p><p>④功能强大</p><p>⑤可混合</p><p>⑥简单易用</p><p>⑦简单易学</p><h2 id="第二章-Python如何运行程序"><a href="#第二章-Python如何运行程序" class="headerlink" title="第二章:Python如何运行程序"></a>第二章:Python如何运行程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本章和下一章将给出程序执行的简要说明:应该如何开始编写代码以及Python如何运行代码。</span><br></pre></td></tr></table></figure><h4 id="Python的视角"><a href="#Python的视角" class="headerlink" title="Python的视角"></a>Python的视角</h4><p>当Python运行脚本时,在代码开始进行处理之前,Python还会执行一些步骤。确切地说,第一步是编译成所谓的’字节码’,之后将其转发到所谓的’虚拟机’中。</p><h4 id="字节码编译"><a href="#字节码编译" class="headerlink" title="字节码编译"></a>字节码编译</h4><p>当程序执行时，Python内部(对大多数用户是完全隐藏的)会先将源代码(文件中的语句)编译成所谓字节码的形式。相对于文本文件中原始的代码语句,字节码的运行速度要快很多。</p><p>如果Python进程在机器上拥有写入权限,那么它将把程序的字节码保存为一个以.pyc为扩展名的文件(“.pyc”就是编译过的”.py” 源代码)。当程序运行以后，我们将会在源代码的同级目录下看到这些.pyc文件。</p><p>Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时,如果上次运行程序以后没有进行修改代码操作的话,Python将会直接加载.pyc的文件即跳过编译步骤。当Python必须重编译时,它会自动检查源文件和字节码文件的时间戳:如果你又保存了源代码,下次程序运行时,字节码将重新创建。</p><p>字节码文件同样是分发Python程序的方法之一:如果Python找到的都是.pyc文件,它也很乐意运行这个程序,尽管没有原始的.py源文件。</p><h4 id="Python虚拟机-PVM"><a href="#Python虚拟机-PVM" class="headerlink" title="Python虚拟机(PVM)"></a>Python虚拟机(PVM)</h4><p>一旦程序编译成字节码(或者从已经编译好的.pyc文件中载入),之后的字节码会发送到Python虚拟机(Python Virtual Machine)上执行。PVM不是一个独立的程序,不需要安装。它是Python的运行引擎,是Python中实际运行脚本的组件。从技术层面考虑,它才是所谓”Python解释器”的最后一步。</p><h4 id="性能的含义"><a href="#性能的含义" class="headerlink" title="性能的含义"></a>性能的含义</h4><p>Python与C和C++这类完全编译语言不同之处在于,Python是代码写好之后立即运行。另外一个就是,上文提到的字节码仅仅是特定于Python的一种表现形式,并不是机器的二进制代码。</p><p>这就是Python代码无法运行的像C或C++代码一样快的原因:PVM循环仍需要解释字节码,并且字节码指令与CPU指令相比需要更多的工作。</p><h4 id="开发的含义"><a href="#开发的含义" class="headerlink" title="开发的含义"></a>开发的含义</h4><p>Python执行模块的另一个情况是其开发和执行的环境实际上并没有区别。也就是说,编译和执行源代码是同一个系统。编译器总是在运行时出现,并且是运行程序系统的一部分。</p><p>这使得开发周期大大缩短。在程序开始执行之前不需要预编译和连接,只需要简单输入并运行代码即可。这同样使Python具有更多的动态语言特性。</p><h4 id="执行模块的变体"><a href="#执行模块的变体" class="headerlink" title="执行模块的变体"></a>执行模块的变体</h4><p>略</p><h4 id="Python实现的替代者"><a href="#Python实现的替代者" class="headerlink" title="Python实现的替代者"></a>Python实现的替代者</h4><p>在该书编写过程中,Python语言主要有三种实现方式(CPython、JPython和Ironpython)以及一些次要的实现方式,例如Stackless Python。简要的说,CPython是标准的实现,其他的都是有特定的目标和角色的。</p><h5 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h5><p>和python的其他两种实现方式对比，原始的、标准的python实现方式通常称作CPython。这个名字根据它是由可移植的ANSI C语言代码编写而成的这个事实而来的。</p><h5 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h5><p>Jython系统(最初称为JPython)是一种Python语言的替代实现方式,其目的是为了与Java编程语言集成。Jython包含了Java类,这些类编译了Python源代码、形成Java字节码,并将得到的字节码映射到Java虚拟机(JVM)上。</p><p>Jython的目的是让Python代码能够脚本化java应用程序,他实现了与java的无缝集成。但是Jython要比CPython慢而且也不够健壮,它往往被看做是一种有趣的工具。</p><h5 id="Ironpython"><a href="#Ironpython" class="headerlink" title="Ironpython"></a>Ironpython</h5><p>Python的第三种实现方式（比前两种都要新），其目的是让python程序可以与windows平台的.NET框架以及与之对应的Linux上开源的Mono编程写的应用相集成。效果大体等同于Jython。</p><h5 id="Psyco实时编译器"><a href="#Psyco实时编译器" class="headerlink" title="Psyco实时编译器"></a>Psyco实时编译器</h5><p>可以让Python程序运行很快,本质上是一个扩展字节码执行模块的组件,但是仅对于循环或涉及到整数和浮点数的优化起到较好效果,且使用上对于硬件有局限性。</p><h2 id="第三章：如何运行程序"><a href="#第三章：如何运行程序" class="headerlink" title="第三章：如何运行程序"></a>第三章：如何运行程序</h2><p>~</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 ~"></a>未完待续 ~</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言：python简介&quot;&gt;&lt;a href=&quot;#前言：python简介&quot; class=&quot;headerlink&quot; title=&quot;前言：python简介&quot;&gt;&lt;/a&gt;前言：python简介&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Python" scheme="http://5jp.top/categories/Python/"/>
    
    
      <category term="study for python手册" scheme="http://5jp.top/tags/study-for-python%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Django Book 2.0 学习心得</title>
    <link href="http://5jp.top/Django-Book-2-0-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97.html"/>
    <id>http://5jp.top/Django-Book-2-0-学习心得.html</id>
    <published>2019-03-12T02:33:18.000Z</published>
    <updated>2019-05-10T07:27:28.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-介绍Django"><a href="#第一章-介绍Django" class="headerlink" title="第一章:介绍Django"></a>第一章:介绍Django</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前言:Django，一个可以使Web开发工作愉快并且高效的Web开发框架。 使用Django，使你能够以最小的代价构建和维护高质量的Web应用。</span><br></pre></td></tr></table></figure><p>​    为了让开发人员专注于web应用上有趣而又关键性的东西,Django应运而生。通过阅读这本书,我们将学会快速开发功能强大网站的技巧,并且我们的代码将会十分清晰,易于维护.本书的代码清晰,易维护,通过学习,可以快速开发功能强大的网站。</p><h4 id="框架是什么"><a href="#框架是什么" class="headerlink" title="框架是什么?"></a>框架是什么?</h4><p>​    Web框架为应用程序提供了一套程序框架， 这样你可以专注于编写清晰、易维护的代码，而无需从头做起。 简单来说，这就是Django所能做的。    </p><h4 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h4><p>​    通过使用Django来完成一个网站功能的例子： <strong>首先</strong>，我们分成4个Python的文件，(models.py ,views.py , urls.py ) 和html模板文件 (latest_books.html )。<strong>然后</strong>，不用关心语法细节；只要用心感觉整体的设计。 这里只关注分割后的几个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)models.py 文件主要用一个Python类来描述数据表。称为模型(model)。运用这个类，你可以通过简单的Python的代码来创建、检索、更新、删除 数据库中的记录而无需写一条又一条的SQL语句。</span><br><span class="line">2)views.py文件包含了页面的业务逻辑。latest_books()函数叫做视图。</span><br><span class="line">3)urls.py 指出了什么样的URL调用什么的视图。在这个例子中/latest/URL将会调用latest_books()这个函数。换句话说，如果你的域名是example.com，任何人浏览网址http://example.com/latest/将会调用latest_books()这个函数。</span><br><span class="line">4)latest_books.html是html模板,它描述了这个页面的设计是如何的。使用带基本逻辑声明的模板语言，如&#123;% for book in book_list %&#125;</span><br></pre></td></tr></table></figure><p>​    结合起来，这些部分松散遵循的模式称为模型-视图-控制器(MVC)。 简单的说， MVC 是一种软件开发的方法，它把代码的定义和数据访问的方法（模型）与请求逻辑（控制器）还有用户接口（视图）分开来。</p><p>​    <strong>这种设计模式关键的优势</strong>在于各种组件都是松散结合的。这样，每个由Django驱动 的Web应用都有着明确的目的，并且可独立更改而不影响到其它的部分。比如，开发者更改一个应用程序中的 URL 而不用影响到这个程序底层的实现。设计师可以改变 HTML 页面 的样式而不用接触 Python 代码。数据库管理员可以重新命名数据表并且只需更改一个地方，无需从一大堆文件中进行查找和替换。</p><h4 id="Django历史"><a href="#Django历史" class="headerlink" title="Django历史"></a>Django历史</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果你曾编写过网络应用程序。 那么你很有可能熟悉之前我们的 CGI 例子。</span><br><span class="line">1. 从头开始编写网络应用程序。</span><br><span class="line">2. 从头编写另一个网络应用程序。</span><br><span class="line">3. 从第一步中总结（找出其中通用的代码），并运用在第二步中。</span><br><span class="line">4. 重构代码使得能在第 2 个程序中使用第 1 个程序中的通用代码。</span><br><span class="line">5. 重复 2-4 步骤若干次。</span><br><span class="line">6. 意识到你发明了一个框架。</span><br><span class="line">这正是为什么 Django 建立的原因！</span><br></pre></td></tr></table></figure><h3 id="第二章-入门"><a href="#第二章-入门" class="headerlink" title="第二章:入门"></a>第二章:入门</h3><p><strong>Django和Python版本对应:</strong></p><p><img src="/Django-Book-2-0-学习心得\Django.jpg" alt></p><p>​    最新最好的django的开发版本称为trunk,可以从django的subversion处获得。如果你想尝鲜，或者想为django贡献代码，那么你应当安装这个版本。</p><h3 id="第三章-视图和URL配置"><a href="#第三章-视图和URL配置" class="headerlink" title="第三章:视图和URL配置"></a>第三章:视图和URL配置</h3><p>​    前一章学习了如果创建一个Django项目并启动Django开发服务器。在这一章我们将学习使用Django创建动态网页的基本知识。</p><h1 id="未完待续NE"><a href="#未完待续NE" class="headerlink" title="未完待续NE"></a>未完待续NE</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一章-介绍Django&quot;&gt;&lt;a href=&quot;#第一章-介绍Django&quot; class=&quot;headerlink&quot; title=&quot;第一章:介绍Django&quot;&gt;&lt;/a&gt;第一章:介绍Django&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://5jp.top/categories/Python/"/>
    
    
      <category term="study for django" scheme="http://5jp.top/tags/study-for-django/"/>
    
  </entry>
  
</feed>
